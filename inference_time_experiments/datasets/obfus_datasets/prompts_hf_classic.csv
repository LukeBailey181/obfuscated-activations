question,target_answer,db_name,query_category,instructions,db_type,generated_query,reason,error_msg,exact_match,correct,error_query_gen,error_db_exec,timeout,latency_seconds,tokens_used,k_shot_prompt,glossary,table_metadata_string,table_aliases,prev_invalid_sql,prev_error_msg,question_0,query_0,question_1,query_1,cot_instructions,cot_pregen,prompt
"Which authors have written publications in both the domain ""Machine Learning"" and the domain ""Data Science""?","SELECT {author.name,author.aid} FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science') ) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);",academic,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `Which authors have written publications in both the domain ""Machine Learning"" and the domain ""Data Science""?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `Which authors have written publications in both the domain ""Machine Learning"" and the domain ""Data Science""?`."
What is the total number of citations received by each author?,"SELECT {author.name, author.aid}, sum(publication.citation_num) AS total_citations FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid GROUP BY {} ORDER BY total_citations DESC NULLS LAST;SELECT {a.aid, a.name}, COUNT(c.cited) AS total_citations FROM author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN cite c ON p.pid = c.cited GROUP BY {} ORDER BY total_citations DESC;",academic,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of citations received by each author?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the total number of citations received by each author?`."
What is the total number of publications published in each year?,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS total_publications FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of publications published in each year?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the total number of publications published in each year?`."
What is the average number of references cited by publications in each domain name?,"SELECT {domain.name,domain.did}, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY {};",academic,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average number of references cited by publications in each domain name?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the average number of references cited by publications in each domain name?`."
What is the average number of citations received by publications in each year?,"SELECT publication.year, AVG(publication.citation_num) AS average_citations FROM publication GROUP BY publication.year ORDER BY publication.year NULLS LAST;",academic,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average number of citations received by publications in each year?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the average number of citations received by publications in each year?`."
What is the title of the publication that has received the highest number of citations?,SELECT publication.title FROM publication ORDER BY publication.citation_num DESC NULLS LAST LIMIT 1;,academic,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the title of the publication that has received the highest number of citations?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the title of the publication that has received the highest number of citations?`."
What are the top 5 domains with the highest number of authors associated with them?,"SELECT {d.name, d.did}, COUNT(DISTINCT a.aid) AS author_count FROM author a JOIN domain_author da ON a.aid = da.aid JOIN domain d ON da.did = d.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;",academic,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 5 domains with the highest number of authors associated with them?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the top 5 domains with the highest number of authors associated with them?`."
"What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?",SELECT publication.title FROM publication ORDER BY publication.reference_num DESC LIMIT 3;,academic,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?`."
What are the top 3 publications with the highest number of citations?,"SELECT {publication.title, publication.pid}, publication.citation_num FROM publication ORDER BY publication.citation_num DESC LIMIT 3;",academic,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 3 publications with the highest number of citations?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the top 3 publications with the highest number of citations?`."
What are the titles of all publications ordered alphabetically?,SELECT DISTINCT publication.title FROM publication ORDER BY publication.title ASC NULLS LAST;,academic,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the titles of all publications ordered alphabetically?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the titles of all publications ordered alphabetically?`."
What is the ratio of publications to authors in the database?,"SELECT CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;",academic,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of publications to authors in the database?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the ratio of publications to authors in the database?`."
What is the ratio of publications presented in conferences to publications published in journals?,"SELECT CAST(COUNT(DISTINCT CASE WHEN cid IS NOT NULL THEN pid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN jid IS NOT NULL THEN pid END), 0) AS ratio FROM publication;",academic,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of publications presented in conferences to publications published in journals?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the ratio of publications presented in conferences to publications published in journals?`."
What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.,"SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_publication LEFT JOIN domain_keyword ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_keyword LEFT JOIN domain_publication ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT d.did, COALESCE(CAST(COUNT(DISTINCT dp.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT dk.kid), 0), 0) AS publication_to_keyword_ratio FROM domain d LEFT JOIN domain_publication dp ON d.did = dp.did LEFT JOIN domain_keyword dk ON d.did = dk.did GROUP BY d.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;",academic,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.`."
How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.`."
How does the ratio of authors to organizations differ by continent?,"SELECT organization.continent, COUNT(DISTINCT author.aid)::float / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC NULLS LAST;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;",academic,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the ratio of authors to organizations differ by continent?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `How does the ratio of authors to organizations differ by continent?`."
Which author had the most publications in the year 2021 and how many publications did he/she have that year?,"SELECT {author.name, author.aid}, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY {} ORDER BY publication_count DESC NULLS LAST LIMIT 1;",academic,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `Which author had the most publications in the year 2021 and how many publications did he/she have that year?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `Which author had the most publications in the year 2021 and how many publications did he/she have that year?`."
What is the total number of publications presented in each conference?,"SELECT {conference.name, conference.cid}, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY {} ORDER BY total_publications DESC;",academic,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of publications presented in each conference?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the total number of publications presented in each conference?`."
"What is the total number of publications in each journal, ordered by the number of publications in descending order?","SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid=journal.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid=publication.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;",academic,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of publications in each journal, ordered by the number of publications in descending order?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What is the total number of publications in each journal, ordered by the number of publications in descending order?`."
"How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.","SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid=conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC NULLS LAST;",academic,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.`."
"How many publications were published in journals whose names start with the letter ""J""?",SELECT count(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name ilike 'J%';,academic,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `How many publications were published in journals whose names start with the letter ""J""?`

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `How many publications were published in journals whose names start with the letter ""J""?`."
"Which organizations have authors who have written publications in the domain ""Machine Learning""?","SELECT DISTINCT {organization.name, organization.oid} FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using an exact match
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `Which organizations have authors who have written publications in the domain ""Machine Learning""?`

Follow the instructions below to generate the query:
Always filter names using an exact match

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `Which organizations have authors who have written publications in the domain ""Machine Learning""?`."
Which authors belong to the same domain as Martin?,"SELECT DISTINCT {a2.name, a2.aid} FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE with percent sign wildcards
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `Which authors belong to the same domain as Martin?`

Follow the instructions below to generate the query:
Always filter names using ILIKE with percent sign wildcards

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `Which authors belong to the same domain as Martin?`."
Which authors are not part of any organization?,"SELECT DISTINCT {name, aid} FROM author WHERE oid IS NULL",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `Which authors are not part of any organization?`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `Which authors are not part of any organization?`."
What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?,"SELECT DISTINCT {publication.title, publication.pid} FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE domain.name ILIKE '%Sociology%' AND publication.year = 2020 AND publication.cid = domain_conference.cid;",academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
Finally, to see which ones were presented at conferences, you must join the domain table with the domain_conference table.
You must also filter names using ILIKE.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?`

Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
Finally, to see which ones were presented at conferences, you must join the domain table with the domain_conference table.
You must also filter names using ILIKE.

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?`."
"What are the names of the authors who have written publications in the domain ""Computer Science""?",SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name ilike '%computer%science%';,academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
You must also filter names using ILIKE.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the authors who have written publications in the domain ""Computer Science""?`

Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
You must also filter names using ILIKE.

DDL statements:
CREATE TABLE cite (
  cited bigint, --ID of the publication being cited
  citing bigint --ID of the publication that is citing another publication
);
CREATE TABLE author (
  aid bigint, --Unique identifier for each author
  oid bigint, --Foreign key referencing the organization the author belongs to
  homepage text, --URL of the author's personal website
  name text --Name of the author
);
CREATE TABLE domain (
  did bigint, --Unique identifier for a domain
  name text --Name of the domain
);
CREATE TABLE writes (
  aid bigint, --Foreign key referencing the author table's primary key
  pid bigint --Foreign key referencing the publication table's primary key
);
CREATE TABLE journal (
  jid bigint, --Unique identifier for a journal
  homepage text, --The homepage URL for the journal
  name text --The name of the journal
);
CREATE TABLE keyword (
  kid bigint, --Unique identifier for a keyword
  keyword text --The actual keyword
);
CREATE TABLE conference (
  cid bigint, --Unique identifier for a conference
  homepage text, --The homepage URL for the conference
  name text --The name of the conference
);
CREATE TABLE publication (
  year bigint, --The year of publication
  cid bigint, --The ID of the conference where the publication was presented
  citation_num bigint, --The number of citations received by the publication
  jid bigint, --The ID of the journal where the publication was published
  pid bigint, --The unique ID of the publication
  reference_num bigint, --The number of references cited by the publication
  title text, --The title of the publication
  abstract text --The abstract of the publication
);
CREATE TABLE organization (
  oid bigint, --Unique identifier for the organization
  continent text, --Continent where the organization is located
  homepage text, --URL of the organization's homepage
  name text --Name of the organization
);
CREATE TABLE domain_author (
  aid bigint, --Foreign key referencing the author table's primary key
  did bigint --Foreign key referencing the domain table's primary key
);
CREATE TABLE domain_journal (
  did bigint, --Foreign key referencing the domain table's primary key
  jid bigint --Foreign key referencing the journal table's primary key
);
CREATE TABLE domain_keyword (
  did bigint, --Foreign key referencing the 'did' column of the 'domain' table
  kid bigint --Foreign key referencing the 'kid' column of the 'keyword' table
);
CREATE TABLE domain_conference (
  cid bigint, --Foreign key referencing the cid column in the conference table
  did bigint --Foreign key referencing the did column in the domain table
);
CREATE TABLE domain_publication (
  did bigint, --Foreign key referencing the domain table's primary key column (did)
  pid bigint --Foreign key referencing the publication table's primary key column (pid)
);
CREATE TABLE publication_keyword (
  pid bigint, --Foreign key referencing the publication table's primary key (pid)
  kid bigint --Foreign key referencing the keyword table's primary key (kid)
);


Generate a valid postgres query that best answers the question `What are the names of the authors who have written publications in the domain ""Computer Science""?`."
What month were most students admitted? Return the no. of students and the month as a date,"SELECT date_trunc('month', s.admit_term) AS month, COUNT(*) AS total_students FROM student s GROUP BY MONTH ORDER BY total_students DESC LIMIT 1;SELECT TO_CHAR(DATE_TRUNC('month', s.admit_term), 'YYYY-MM') AS month, COUNT(*) AS total_students FROM student s GROUP BY month ORDER BY total_students DESC LIMIT 1;",advising,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What month were most students admitted? Return the no. of students and the month as a date`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What month were most students admitted? Return the no. of students and the month as a date`."
What's the average predicted time to graduation since admission in no. of days?,SELECT avg(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;,advising,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the average predicted time to graduation since admission in no. of days?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What's the average predicted time to graduation since admission in no. of days?`."
How many students were predicted to graduate in the last 10 years?,"SELECT count(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_TRUNC('year', CURRENT_DATE) - interval '10 year';",advising,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How many students were predicted to graduate in the last 10 years?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How many students were predicted to graduate in the last 10 years?`."
How long has it been in days since the last admitted student? Give the answer as an integer.,SELECT CURRENT_DATE - max(admit_term) AS duration_since_last_admitted_student FROM student;,advising,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How long has it been in days since the last admitted student? Give the answer as an integer.`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How long has it been in days since the last admitted student? Give the answer as an integer.`."
Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday,SELECT DISTINCT co.course_id FROM course_offering co JOIN offering_instructor oi ON co.offering_id = oi.offering_id WHERE (co.semester = 1 OR co.semester = 2) AND co.end_time < '13:00:00' AND co.thursday IS NOT NULL;,advising,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday`."
What is the total number of students who found the instructor to be hilarious per course id?,"SELECT course_tags_count.course_id, SUM(course_tags_count.hilarious) AS total_hilarious FROM course_tags_count GROUP BY course_tags_count.course_id;",advising,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of students who found the instructor to be hilarious per course id?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of students who found the instructor to be hilarious per course id?`."
What is the average clarity score for each instructor who taught a course?,"SELECT {i.name, i.instructor_id}, AVG(c.clarity_score) FROM course c JOIN course_offering co ON c.course_id = co.course_id JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id GROUP BY {};",advising,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average clarity score for each instructor who taught a course?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the average clarity score for each instructor who taught a course?`."
How many course offerings have a final exam and how many do not?,"SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering co;",advising,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How many course offerings have a final exam and how many do not?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How many course offerings have a final exam and how many do not?`."
How many courses does each department offer?,"SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC NULLS LAST;",advising,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How many courses does each department offer?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How many courses does each department offer?`."
How many courses are offered for each semester id?,"SELECT course_offering.semester, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM course_offering GROUP BY course_offering.semester ORDER BY course_offering.semester;SELECT semester.semester_id, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM semester LEFT JOIN course_offering ON semester.semester_id = course_offering.semester GROUP BY semester.semester_id;",advising,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How many courses are offered for each semester id?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How many courses are offered for each semester id?`."
"Which course has the highest number of enrolled students, and what is the enrollment number?","SELECT {course.name, course.course_id, course.number}, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC NULLS LAST LIMIT 1;",advising,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Which course has the highest number of enrolled students, and what is the enrollment number?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Which course has the highest number of enrolled students, and what is the enrollment number?`."
"What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?","SELECT course_tags_count.course_id, course_tags_count.participation FROM course_tags_count ORDER BY course_tags_count.participation DESC NULLS LAST;",advising,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?`."
"What is the total number of students enrolled in each course, ordered from highest to lowest?","SELECT {course.course_id, course.name, course.number}, SUM(course.num_enrolled) AS total_students FROM course GROUP BY {} ORDER BY total_students DESC NULLS LAST;",advising,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of students enrolled in each course, ordered from highest to lowest?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of students enrolled in each course, ordered from highest to lowest?`."
"What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.","SELECT student.student_id, student.total_credit FROM student ORDER BY student.total_credit DESC NULLS LAST;",advising,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.`."
"What is the name of the instructor who has taught the most courses, and how many courses have they taught?","SELECT instructor.name, count(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY num_courses DESC LIMIT 1;",advising,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the name of the instructor who has taught the most courses, and how many courses have they taught?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the name of the instructor who has taught the most courses, and how many courses have they taught?`."
What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?,SELECT SUM(CASE WHEN c.has_exams THEN c.num_enrolled ELSE 0 END)::FLOAT / SUM(CASE WHEN NOT c.has_exams THEN c.num_enrolled ELSE 0 END) AS ratio FROM course c;,advising,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?`."
What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?,"SELECT course_tags_count.course_id, CAST(course_tags_count.clear_grading AS FLOAT) / NULLIF(course_tags_count.good_feedback, 0) AS ratio FROM course_tags_count ORDER BY course_tags_count.course_id NULLS LAST;",advising,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?`."
What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?,"SELECT course_offering.semester, CAST(SUM(CASE WHEN course.has_projects THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN course.has_exams THEN 1 ELSE 0 END), 0) AS ratio FROM course JOIN course_offering ON course.course_id = course_offering.course_id GROUP BY course_offering.semester ORDER BY course_offering.semester NULLS LAST;",advising,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?`."
What is the ratio of helpfulness scores to clarity scores for each course ID?,"SELECT course.course_id, CAST(course.helpfulness_score AS FLOAT) / NULLIF(course.clarity_score, 0) AS ratio FROM course;",advising,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of helpfulness scores to clarity scores for each course ID?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the ratio of helpfulness scores to clarity scores for each course ID?`."
How does the ratio of enrolled students to the number of reviews vary across different courses?,"SELECT {course.course_id, course.name, course.number}, CAST(course.num_enrolled AS FLOAT) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY student_review_ratio NULLS LAST;",advising,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the ratio of enrolled students to the number of reviews vary across different courses?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How does the ratio of enrolled students to the number of reviews vary across different courses?`."
Which courses have been taken by students in the Computer Science program?,"SELECT DISTINCT {course.name, course.course_id, course.number} AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE program.name ILIKE '%Computer Science%';",advising,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Which courses have been taken by students in the Computer Science program?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Which courses have been taken by students in the Computer Science program?`."
Which courses have a final project and a final exam?,"SELECT DISTINCT {course.name, course.course_id, course.number} FROM course_offering JOIN course ON course_offering.course_id = course.course_id WHERE course_offering.has_final_project = true AND course_offering.has_final_exam = true;",advising,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Which courses have a final project and a final exam?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Which courses have a final project and a final exam?`."
What is the total number of students who have taken a course with a final project or exam?,SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = true OR course_offering.has_final_exam = true;,advising,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of students who have taken a course with a final project or exam?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of students who have taken a course with a final project or exam?`."
What is the total number of credits earned by students in each program?,"SELECT {program.name, program.program_id}, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY {};",advising,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of credits earned by students in each program?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the total number of credits earned by students in each program?`."
How many students have declared a major in each program?,"SELECT {program.name, program.program_id}, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE student.declare_major IS NOT NULL GROUP BY {} ORDER BY number_of_students DESC;",advising,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `How many students have declared a major in each program?`

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `How many students have declared a major in each program?`."
Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.,"SELECT student.firstname, student.lastname FROM student WHERE student.minor IS NOT NULL ORDER BY student.lastname NULLS LAST;",advising,instruct,"
Follow the instructions below to generate the query:
student.declare_major is null for students who have not declared their major.
student.minor is null for students who have not declared a minor program.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.`

Follow the instructions below to generate the query:
student.declare_major is null for students who have not declared their major.
student.minor is null for students who have not declared a minor program.

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.`."
What is the average GPA of students in the program mathematics?,SELECT AVG(student.total_gpa) FROM student JOIN program ON student.program_id = program.program_id WHERE LOWER(program.name) = 'mathematics';,advising,instruct,"
Follow the instructions below to generate the query:
Match strings case-insensitively
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average GPA of students in the program mathematics?`

Follow the instructions below to generate the query:
Match strings case-insensitively

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What is the average GPA of students in the program mathematics?`."
What are the names of all the courses offered by the department of Computer Science?,SELECT course.name FROM course WHERE course.department ILIKE '%Computer Science%' ORDER BY course.name ASC NULLS LAST;,advising,instruct,"
Follow the instructions below to generate the query:
Filter strings using ILIKE.
Use the student_record table for all information relating to students' choices and their course.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of all the courses offered by the department of Computer Science?`

Follow the instructions below to generate the query:
Filter strings using ILIKE.
Use the student_record table for all information relating to students' choices and their course.

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What are the names of all the courses offered by the department of Computer Science?`."
"What are the easiness scores for courses in the ""Computer Science"" department? Show both courses and scores.","SELECT {course.name, course.course_id, course.number}, course.easiness_score FROM course WHERE course.department = 'Computer Science';",advising,instruct,"
Follow the instructions below to generate the query:
Always filter names using exact string matching
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the easiness scores for courses in the ""Computer Science"" department? Show both courses and scores.`

Follow the instructions below to generate the query:
Always filter names using exact string matching

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `What are the easiness scores for courses in the ""Computer Science"" department? Show both courses and scores.`."
Return the student IDs who have taken an in-person course and have gotten a grade of A or C.,"SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');",advising,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match.
When asked for specific students or courses, do not return duplicates.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the student IDs who have taken an in-person course and have gotten a grade of A or C.`

Follow the instructions below to generate the query:
Always filter strings with an exact match.
When asked for specific students or courses, do not return duplicates.

DDL statements:
CREATE TABLE area (
  course_id bigint, --Unique identifier for each course
  area text --The area of study for each course
);
CREATE TABLE course (
  helpfulness_score bigint, --The overall helpfulness score of the course as rated by students.
  num_semesters bigint, --The number of semesters the course is offered in a year.
  num_enrolled bigint, --The total number of students enrolled in the course.
  num_reviews bigint, --The total number of reviews/ratings for the course.
  clarity_score bigint, --The overall clarity score of the course as rated by students.
  easiness_score bigint, --The overall easiness score of the course as rated by students.
  course_id bigint, --The unique identifier for the course.
  description text, --A brief description of the course content.
  has_projects boolean, --Indicates whether the course has any projects or not.
  has_exams boolean, --Indicates whether the course has any exams or not.
  has_discussion boolean, --Indicates whether the course has any discussion sessions or not.
  has_lab boolean, --Indicates whether the course has any lab sessions or not.
  name text, --The name of the course.
  department text, --The department offering the course. Eg 'Mathematics', 'Physics'
  number text, --The course number/code.
  credits text, --The number of credits awarded for completing the course.
  advisory_requirement text, --Any advisory requirements for taking the course.
  enforced_requirement text --Any enforced requirements for taking the course.
);
CREATE TABLE program (
  program_id bigint, --Unique identifier for each program
  name text, --Name of the program, Eg 'Computer Science', 'Physics'
  college text, --Name of the college offering the program
  introduction text --Introduction to the program
);
CREATE TABLE student (
  student_id bigint, --Unique identifier for each student
  program_id bigint, --Identifier for the program the student is enrolled in
  total_credit bigint, --Total number of credits earned by the student
  total_gpa numeric, --Cumulative GPA of the student
  admit_term date, --Term in which the student was admitted. Format is YYYY-MM-DD
  predicted_graduation_semester date, --Semester in which the student is predicted to graduate. Format is YYYY-MM-DD
  degree text, --Degree program the student is enrolled in. Can only be 'Bachelor of Science' or 'Bachelor of Arts'.
  entered_as text, --Status of the student when they entered the program. e.g. 'Freshman', 'Transfer Student'
  lastname text, --Last name of the student
  firstname text, --First name of the student
  minor text, --Minor program the student is enrolled in
  declare_major text, --Major program the student declared
  internship text --Internship program the student is enrolled in
);
CREATE TABLE semester (
  semester_id bigint, --Unique identifier for each semester. Sort by this column to get the right year-semester order.
  year bigint, --The year in which the semester takes place
  semester text --The name or identifier for the semester Can only be 'Fall', 'Spring', or 'Summer'
);
CREATE TABLE instructor (
  instructor_id bigint, --Unique identifier for each instructor
  name text, --Name of the instructor
  uniqname text --Unique name of the instructor used for login and identification purposes
);
CREATE TABLE program_course (
  program_id bigint, --The ID of the program associated with the course
  course_id bigint, --The ID of the course
  workload bigint, --The workload of the course in hours
  category text --The category of the course. Can only be 'Core' or 'Elective'.
);
CREATE TABLE student_record (
  student_id bigint, --Unique identifier for each student
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course was taken
  offering_id bigint, --Unique identifier for each offering of a course
  how text, --How the student took the course. Can only be 'in-person' or 'online'.
  transfer_source text, --If the course was transferred from another institution, the name of that institution
  earn_credit text, --Whether the student earned credit for the course (e.g. Yes, No)
  repeat_term text, --If the student repeated the course, the semester in which it was repeated
  test_id text, --Unique identifier for each test taken in the course
  grade text --The grade received for the course
);
CREATE TABLE course_offering (
  offering_id bigint, --Unique identifier for each course offering
  course_id bigint, --Unique identifier for each course
  semester bigint, --The semester ID in which the course is offered
  section_number bigint, --The section number of the course
  start_time time without time zone, --The start time of the course
  end_time time without time zone, --The end time of the course
  monday text, --The instructor's name for Monday
  tuesday text, --The instructor's name for Tuesday
  wednesday text, --The instructor's name for Wednesday
  thursday text, --The instructor's name for Thursday
  friday text, --The instructor's name for Friday
  saturday text, --The instructor's name for Saturday
  sunday text, --The instructor's name for Sunday
  has_final_project boolean, --Indicates whether the course has a final project
  has_final_exam boolean, --Indicates whether the course has a final exam
  textbook text, --The name of the textbook used in the course
  class_address text, --The address of the classroom where the course is held
  allow_audit text --Indicates whether auditing the course is allowed
);
CREATE TABLE course_tags_count (
  course_id bigint, --The unique identifier for each course.
  clear_grading bigint, --Number of students who found the grading criteria clear and easy to understand.
  pop_quiz bigint, --Number of pop quizzes given during the course.
  group_projects bigint, --Number of group projects assigned during the course.
  inspirational bigint, --Number of students who found the course content inspirational.
  long_lectures bigint, --Number of students who found the lectures to be too long.
  extra_credit bigint, --Number of extra credit opportunities provided during the course.
  few_tests bigint, --Number of tests given during the course.
  good_feedback bigint, --Number of students who received good feedback from the instructor.
  tough_tests bigint, --Number of students who found the tests to be tough.
  heavy_papers bigint, --Number of papers assigned during the course.
  cares_for_students bigint, --Number of students who felt that the instructor cared for their well-being.
  heavy_assignments bigint, --Number of assignments given during the course.
  respected bigint, --Number of students who respected the instructor.
  participation bigint, --Number of students who participated actively in the course.
  heavy_reading bigint, --Number of reading assignments given during the course.
  tough_grader bigint, --Number of students who found the instructor to be a tough grader.
  hilarious bigint, --Number of students who found the instructor to be hilarious.
  would_take_again bigint, --Number of students who would take the course again.
  good_lecture bigint, --Number of students who found the lectures to be good.
  no_skip bigint --Number of students who did not skip any classes during the course.
);
CREATE TABLE comment_instructor (
  instructor_id bigint, --Unique identifier for the instructor
  student_id bigint, --Unique identifier for the student
  score bigint, --Score given by the student to the instructor
  comment_text text --Textual comment given by the student about the instructor
);
CREATE TABLE course_prerequisite (
  pre_course_id bigint, --The ID of the prerequisite course
  course_id bigint --The ID of the course that has the prerequisite
);
CREATE TABLE offering_instructor (
  offering_instructor_id bigint, --Unique identifier for each offering-instructor pair
  offering_id bigint, --Foreign key referencing the offering table
  instructor_id bigint --Foreign key referencing the instructor table
);
CREATE TABLE program_requirement (
  program_id bigint, --Unique identifier for a program
  min_credit bigint, --Minimum number of credits required for the program
  category text, --Category of the program
  additional_req text --Additional requirements for the program, if any
);


Generate a valid postgres query that best answers the question `Return the student IDs who have taken an in-person course and have gotten a grade of A or C.`."
Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.,"SELECT {flight.flight_number, flight.flight_id}, (arrival_time - departure_time) / 60 AS duration_minutes FROM flight ORDER BY duration_minutes LIMIT 1;",atis,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.`."
"What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes",SELECT avg(to_timestamp(arrival_time) - to_timestamp(departure_time) - interval '34 minutes') AS average_duration FROM flight;SELECT AVG(arrival_time - departure_time)/60 - 34 AS average_duration FROM flight;,atis,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes`."
Count the number of flight departures for each month?,"SELECT month.month_name, count(*) AS departure_count FROM flight JOIN month ON extract(MONTH FROM to_timestamp(flight.departure_time)) = month.month_number GROUP BY month.month_name, month.month_number ORDER BY month.month_number;SELECT date_trunc('month', to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY MONTH ORDER BY MONTH;SELECT EXTRACT(MONTH FROM to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;SELECT TO_CHAR(TO_TIMESTAMP(flight.departure_time), 'YYYY-MM') AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;",atis,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Count the number of flight departures for each month?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Count the number of flight departures for each month?`."
What's the earliest flight departure time in the day in HH:MM?,"SELECT to_char(to_timestamp(departure_time)::TIME, 'HH24:MI') AS earliest_departure_time FROM flight ORDER BY earliest_departure_time LIMIT 1;",atis,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the earliest flight departure time in the day in HH:MM?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What's the earliest flight departure time in the day in HH:MM?`."
What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.,"SELECT date_part('day', CURRENT_DATE - to_timestamp(departure_time)) AS difference_in_days FROM flight ORDER BY departure_time LIMIT 1;SELECT (CURRENT_DATE - TO_TIMESTAMP(MIN(f.departure_time))) AS days_difference FROM flight f;",atis,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.`."
What is the total cost of round-trip fares for each airline code?,"SELECT fare.fare_airline, SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare GROUP BY fare.fare_airline ORDER BY total_round_trip_cost DESC;",atis,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total cost of round-trip fares for each airline code?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the total cost of round-trip fares for each airline code?`."
"What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?","SELECT fare.fare_airline, AVG(fare.round_trip_cost) AS average_cost FROM fare WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY fare.fare_airline ORDER BY average_cost DESC NULLS LAST;SELECT airline.airline_name, AVG(fare.round_trip_cost) AS avg_round_trip_cost FROM fare JOIN airline ON fare.fare_airline = airline.airline_code WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY airline.airline_name ORDER BY avg_round_trip_cost DESC;",atis,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?`."
What is the average cost of a one-way trip for each airport pair in the fare table?,"SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare f GROUP BY f.from_airport, f.to_airport ORDER BY f.from_airport, f.to_airport NULLS LAST;",atis,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average cost of a one-way trip for each airport pair in the fare table?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the average cost of a one-way trip for each airport pair in the fare table?`."
"How many meals are served in each compartment, sorted by the number of meals in descending order?","SELECT food_service.compartment, COUNT(food_service.meal_number) AS number_of_meals FROM food_service GROUP BY food_service.compartment ORDER BY number_of_meals DESC NULLS LAST;",atis,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `How many meals are served in each compartment, sorted by the number of meals in descending order?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `How many meals are served in each compartment, sorted by the number of meals in descending order?`."
"How many flights depart from each airport code, excluding departures with connections?","SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport LEFT JOIN flight ON airport.airport_code = flight.from_airport AND flight.connections=0 GROUP BY airport.airport_code;SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport JOIN flight ON airport.airport_code = flight.from_airport WHERE flight.connections=0 GROUP BY airport.airport_code;",atis,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `How many flights depart from each airport code, excluding departures with connections?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `How many flights depart from each airport code, excluding departures with connections?`."
"Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?","SELECT flight.flight_id, (flight.arrival_time - flight.departure_time) AS duration FROM flight WHERE to_airport = 'ORD' ORDER BY duration ASC NULLS LAST;",atis,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?`."
"Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.","SELECT {airport.airport_name, airport.airport_code}, airport.minimum_connect_time FROM airport ORDER BY airport.minimum_connect_time ASC NULLS LAST;",atis,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.`."
Which aircraft code can carry the highest weight of cargo that any aircraft can carry?,SELECT aircraft.aircraft_code FROM aircraft ORDER BY pay_load DESC NULLS LAST LIMIT 1;,atis,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which aircraft code can carry the highest weight of cargo that any aircraft can carry?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which aircraft code can carry the highest weight of cargo that any aircraft can carry?`."
What are the top 2 airlines with the most flights?,"SELECT {airline.airline_name, airline.airline_code}, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY {} ORDER BY number_of_flights DESC NULLS LAST LIMIT 2;",atis,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 2 airlines with the most flights?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What are the top 2 airlines with the most flights?`."
What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.,SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY aircraft.aircraft_code ASC NULLS LAST;,atis,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.`."
Calculate the ratio of the maximum range to the maximum payload for each aircraft,"SELECT aircraft.range_miles::float / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;",atis,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Calculate the ratio of the maximum range to the maximum payload for each aircraft`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Calculate the ratio of the maximum range to the maximum payload for each aircraft`."
What is the ratio of one-way trip costs to round-trip costs for each fare?,"SELECT fare.fare_id, fare.one_direction_cost::float / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY cost_ratio;",atis,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of one-way trip costs to round-trip costs for each fare?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the ratio of one-way trip costs to round-trip costs for each fare?`."
What is the ratio of aircraft capacity to its range in miles for each aircraft code?,"SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS FLOAT) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;",atis,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of aircraft capacity to its range in miles for each aircraft code?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the ratio of aircraft capacity to its range in miles for each aircraft code?`."
What is the proportion of flights with stops out of all flights for each airline code?,"SELECT flight.airline_code, CAST(SUM(CASE WHEN flight.stops > 0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS ratio FROM flight GROUP BY flight.airline_code;",atis,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the proportion of flights with stops out of all flights for each airline code?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the proportion of flights with stops out of all flights for each airline code?`."
How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?,"SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS FLOAT) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC NULLS LAST;",atis,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?`."
Which flights serve meals in first class? Give me the flight id and meal description.,"SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';",atis,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which flights serve meals in first class? Give me the flight id and meal description.`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which flights serve meals in first class? Give me the flight id and meal description.`."
Which airlines offer flights with a stopover in Dallas?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE airport.airport_location ILIKE '%Dallas%';",atis,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which airlines offer flights with a stopover in Dallas?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which airlines offer flights with a stopover in Dallas?`."
Which airlines offer flights from LAX to ORD?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';",atis,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which airlines offer flights from LAX to ORD?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which airlines offer flights from LAX to ORD?`."
"Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?","SELECT {airline.airline_name, airline.airline_code}, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY flight.stops NULLS LAST;",atis,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?`."
"Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?","SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM airline WHERE airline.airline_code NOT IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);",atis,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?`

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?`."
Which state code is Orlando International Airport in?,SELECT state_code FROM airport WHERE airport_name ILIKE '%Orlando International Airport%';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE and wildcards for each of the days separately, since they are not necessarily ordered.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which state code is Orlando International Airport in?`

Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE and wildcards for each of the days separately, since they are not necessarily ordered.

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which state code is Orlando International Airport in?`."
Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers,"SELECT {flight.flight_number, flight.flight_id} FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';",atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE for each of the days separately, since they are not necessarily ordered.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers`

Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE for each of the days separately, since they are not necessarily ordered.

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers`."
What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?,SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
fare.round_trip_required is not needed when getting the round trip cost.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?`

Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
fare.round_trip_required is not needed when getting the round trip cost.

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?`."
What is the minimum amount of time required for a connecting flight at JFK Airport?,SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the minimum amount of time required for a connecting flight at JFK Airport?`

Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `What is the minimum amount of time required for a connecting flight at JFK Airport?`."
How many flights require a round-trip to purchase the fare?,SELECT COUNT(DISTINCT flight_fare.flight_id) FROM flight_fare JOIN fare ON flight_fare.fare_id = fare.fare_id WHERE fare.round_trip_required = 'Yes';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,"Generate a postgres query to answer this question: `How many flights require a round-trip to purchase the fare?`

Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.

DDL statements:
CREATE TABLE city (
  city_code text, --The code assigned to the city
  city_name text, --The name of the city
  state_code text, --The 2-letter code assigned to the state where the city is located. E.g. 'NY', 'CA', etc.
  country_name text, --The name of the country where the city is located
  time_zone_code text --The code assigned to the time zone where the city is located. Either 'EST', 'CST', 'MST', or 'PST'.
);
CREATE TABLE days (
  days_code text, --A code representing a day of the week
  day_name text --The name of a day of the week. Either 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday'.
);
CREATE TABLE fare (
  one_direction_cost bigint, --The cost of a one-way trip for this fare
  round_trip_cost bigint, --The cost of a round-trip for this fare
  fare_id bigint, --The unique identifier for this fare
  fare_basis_code text, --The code used to determine the fare's pricing rules
  fare_airline text, --The airline code associated with this fare
  restriction_code text, --Any restrictions or limitations associated with this fare
  round_trip_required text, --Indicates whether a round-trip is required to purchase this fare. Either Yes or No.
  from_airport text, --The 3-letter airport code for the departure location
  to_airport text --The 3-letter airport code for the arrival location
);
CREATE TABLE month (
  month_number bigint, --A unique number assigned to each month of the year.
  month_name text --The name of the month, e.g. January, February, etc.
);
CREATE TABLE state (
  state_code text, --The 2-letter code assigned to the state. E.g. 'NY', 'CA', etc.
  state_name text, --The name of the state
  country_name text --The name of the country the state belongs to
);
CREATE TABLE flight (
  flight_id bigint, --Unique identifier for each flight
  departure_time bigint, --Epoch timestamp for departure time. This is in Unix timestamp format. Always convert to regular date time format.
  arrival_time bigint, --Epoch timestamp for arrival time. This is in Unix timestamp format. Always convert to regular date time format.
  flight_number text, --Flight number assigned by the airline
  stops bigint, --Number of stops during the flight
  connections bigint, --Number of connections during the flight
  time_elapsed bigint, --Total time elapsed during the flight in seconds
  airline_code text, --Code assigned to the airline
  dual_carrier text, --Code assigned to the dual carrier
  flight_days text, --Days of the week the flight operates on. Formatted as comma-delimited 3-letter abbreviations, e.g. `mon,tue,wed` or `tues,thurs`
  from_airport text, --Code assigned to the departure airport
  to_airport text, --Code assigned to the arrival airport
  aircraft_code_sequence text, --Code assigned to the aircraft
  meal_code text, --Code assigned to the meal provided during the flight
  airline_flight text --Code assigned to the airline flight
);
CREATE TABLE airline (
  airline_code text, --The code assigned to the airline
  airline_name text, --The name of the airline
  note text --Any additional notes or comments about the airline
);
CREATE TABLE airport (
  minimum_connect_time bigint, --The minimum amount of time required for a connecting flight at the airport.
  airport_name text, --The name of the airport.
  airport_location text, --The location of the airport, eg 'Las Vegas', 'Chicago'
  airport_code text, --The code assigned to the airport.
  country_name text, --The name of the country where the airport is located.
  time_zone_code text, --The code assigned to the time zone where the airport is located. Either 'EST', 'CST', 'MST', or 'PST'.
  state_code text --The code assigned to the state where the airport is located.
);
CREATE TABLE aircraft (
  length bigint, --The length of the aircraft in feet.
  weight bigint, --The weight of the aircraft in pounds.
  capacity bigint, --The maximum number of passengers the aircraft can carry.
  pay_load bigint, --The maximum weight of cargo the aircraft can carry.
  cruising_speed bigint, --The speed at which the aircraft cruises in miles per hour.
  range_miles bigint, --The maximum distance the aircraft can fly in miles.
  engines bigint, --The number of engines the aircraft has.
  wing_span bigint, --The distance between the tips of the aircraft's wings in feet.
  pressurized text, --Indicates whether the aircraft is pressurized or not. Possible values are 'Yes' and 'No'.
  aircraft_description text, --A short description of the aircraft.
  manufacturer text, --The name of the manufacturer of the aircraft.
  basic_type text, --The basic type of the aircraft. Only 'Jet' is a possible value.
  propulsion text, --The type of propulsion used by the aircraft. Only 'Jet' is a possible value.
  wide_body text, --Indicates whether the aircraft is a wide body or not. Possible values are 'Yes' and 'No'.
  aircraft_code text --The code assigned to the aircraft by the International Air Transport Association (IATA).
);
CREATE TABLE time_zone (
  hours_from_gmt bigint, --The number of hours that the time zone is ahead or behind Greenwich Mean Time (GMT)
  time_zone_code text, --A short code that represents the time zone. For example, 'EST', 'CST', 'MST', or 'PST'.
  time_zone_name text --The name of the time zone
);
CREATE TABLE fare_basis (
  fare_basis_code text, --The code that identifies the fare basis
  booking_class text, --The booking class associated with the fare basis. Either 'First', 'Business', or 'Economy'
  class_type text, --The class type associated with the fare basis. Either 'First Class', 'Business Class', or 'Economy Class'
  premium text, --Indicates whether the fare basis is for a premium class
  economy text, --Indicates whether the fare basis is for an economy class
  discounted text, --Indicates whether the fare basis is for a discounted fare
  night text, --Indicates whether the fare basis is for a night fare
  season text, --The season associated with the fare basis. Can only be 'Peak' or 'Regular'
  basis_days text --The number of days the fare basis is valid for
);
CREATE TABLE flight_leg (
  flight_id bigint, --Unique identifier for each flight
  leg_number bigint, --The sequence number of the leg within the flight
  leg_flight bigint --The flight ID of the leg's corresponding flight
);
CREATE TABLE flight_fare (
  flight_id bigint, --Unique identifier for each flight
  fare_id bigint --Unique identifier for each fare
);
CREATE TABLE flight_stop (
  flight_id bigint, --Unique identifier for each flight
  stop_number bigint, --The order of the stop in the flight
  arrival_flight_number text, --Flight number of the arriving flight at this stop
  departure_time bigint, --The time at which the flight departs from this stop. This is in Unix timestamp format. Always convert to regular date time format.
  departure_flight_number text, --Flight number of the departing flight from this stop
  stop_time bigint, --The duration of the stop at this airport
  arrival_time bigint, --The time at which the flight arrives at this stop. This is in Unix timestamp format. Always convert to regular date time format.
  stop_days text, --Days of the week on which the flight stops at this airport
  stop_airport text, --The 3-letter airport code of the stop
  departure_airline text, --The airline code of the departing flight
  arrival_airline text --The airline code of the arriving flight
);
CREATE TABLE restriction (
  maximum_stay bigint, --The maximum length of stay allowed for the fare.
  advance_purchase bigint, --The number of days in advance the fare must be purchased.
  minimum_stay bigint, --The minimum length of stay required for the fare.
  application text, --The type of fare application. Either 'One Way' or 'Round Trip'.
  restriction_code text, --A code representing the type of restriction, such as blackout dates or minimum stay.
  no_discounts text, --Indicates whether the fare is eligible for discounts or promotions. Either 'Yes' or 'No'.
  stopovers text, --The number of stopovers allowed for the fare.
  saturday_stay_required text --Indicates whether a Saturday night stay is required for the fare. Either 'Yes' or 'No'.
);
CREATE TABLE dual_carrier (
  low_flight_number bigint, --The lowest flight number in the range of flights operated by the dual carrier
  high_flight_number bigint, --The highest flight number in the range of flights operated by the dual carrier
  main_airline text, --The name of the main airline operating the flight
  dual_airline text, --The name of the dual airline operating the flight
  service_name text --The name of the service provided by the dual carrier on the flight
);
CREATE TABLE food_service (
  meal_number bigint, --Unique identifier for each meal served
  meal_code text, --Code assigned to each meal type
  compartment text, --The compartment in which the meal is served (e.g. 'First Class', 'Economy')
  meal_description text --One of 'Breakfast', 'Lunch', 'Dinner'
);
CREATE TABLE time_interval (
  begin_time bigint, --The beginning time of the time interval in Unix timestamp format. Always convert to regular date time format.
  end_time bigint, --The end time of the time interval in Unix timestamp format. Always convert to regular date time format.
  period text --The period of the time interval, represented as a string. For example, 'daily', 'weekly', 'monthly', etc.
);
CREATE TABLE ground_service (
  ground_fare bigint, --The fare charged for ground transportation
  city_code text, --The code for the city where the ground service is provided
  airport_code text, --The 3-letter code for the airport where the ground service is provided
  transport_type text --The type of ground transportation provided
);
CREATE TABLE airport_service (
  miles_distant bigint, --The distance of the airport from the city in miles
  minutes_distant bigint, --The distance of the airport from the city in minutes
  city_code text, --The code of the city where the airport is located
  airport_code text, --The code of the airport
  direction text --The direction of the airport from the city. Either 'North', 'South', 'East', 'West', 'Northeast', 'Northwest', 'Southeast', or 'Southwest'.
);
CREATE TABLE class_of_service (
  rank bigint, --The rank of the class of service
  booking_class text, --The booking class code for the class of service
  class_description text --A brief description of the class of service
);
CREATE TABLE code_description (
  code text, --The code column contains a unique identifier for each record in the table.
  description text --The description column contains a textual description of the code.
);
CREATE TABLE compartment_class (
  compartment text, --The compartment column contains the name of a compartment. Either 'First', 'Business', or 'Economy'.
  class_type text --The class_type column contains the type of a class. Either 'First Class', 'Business Class', or 'Economy Class'.
);
CREATE TABLE equipment_sequence (
  aircraft_code_sequence text, --Sequence number for each aircraft code
  aircraft_code text --Code for each aircraft
);


Generate a valid postgres query that best answers the question `How many flights require a round-trip to purchase the fare?`."
What is the total population in cities by country?,"SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC NULLS LAST;",geography,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total population in cities by country?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the total population in cities by country?`."
What is the average length of rivers in each country?,"SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC NULLS LAST;",geography,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average length of rivers in each country?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the average length of rivers in each country?`."
How many rivers flow through each country?,"SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY number_of_rivers DESC;",geography,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `How many rivers flow through each country?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `How many rivers flow through each country?`."
How many mountains are there in each country?,"SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY number_of_mountains DESC;",geography,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `How many mountains are there in each country?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `How many mountains are there in each country?`."
How many lakes are there in each state?,"SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY lake_count DESC;",geography,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `How many lakes are there in each state?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `How many lakes are there in each state?`."
"Which states have the highest population density in people per square kilometer, ordered from highest to lowest?","SELECT state.state_name, state.density FROM state ORDER BY state.density DESC NULLS LAST;",geography,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which states have the highest population density in people per square kilometer, ordered from highest to lowest?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which states have the highest population density in people per square kilometer, ordered from highest to lowest?`."
"Which lakes have the largest areas in square kilometers, ordered from largest to smallest?","SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC NULLS LAST;",geography,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which lakes have the largest areas in square kilometers, ordered from largest to smallest?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which lakes have the largest areas in square kilometers, ordered from largest to smallest?`."
What are the top 5 cities with the highest population? Give both city names and the population.,"SELECT city.city_name, city.population FROM city ORDER BY city.population DESC NULLS LAST LIMIT 5;",geography,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 5 cities with the highest population? Give both city names and the population.`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What are the top 5 cities with the highest population? Give both city names and the population.`."
"What are the longest rivers in meters, ordered from longest to shortest?","SELECT river.river_name, river.length FROM river ORDER BY river.length DESC NULLS LAST;",geography,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the longest rivers in meters, ordered from longest to shortest?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What are the longest rivers in meters, ordered from longest to shortest?`."
"What are the highest mountains in meters, ordered from highest to lowest altitude?","SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC NULLS LAST;",geography,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the highest mountains in meters, ordered from highest to lowest altitude?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What are the highest mountains in meters, ordered from highest to lowest altitude?`."
What is the ratio of the population of the United States to the population of California?,"SELECT CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.country_name) LIKE '%united states%') AS FLOAT) / CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.state_name) LIKE '%california%') AS FLOAT) AS population_ratio FROM state;",geography,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the population of the United States to the population of California?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the ratio of the population of the United States to the population of California?`."
What is the ratio of the length of the Mississippi River to the length of the Rhine River?,"SELECT CAST((SELECT length FROM river WHERE LOWER(river_name) LIKE '%mississippi%') AS FLOAT) / NULLIF((SELECT length FROM river WHERE LOWER(river_name) LIKE '%rhine%'), 0) AS ratio ;",geography,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the length of the Mississippi River to the length of the Rhine River?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the ratio of the length of the Mississippi River to the length of the Rhine River?`."
What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly,"SELECT (CAST(everest.mountain_altitude AS FLOAT) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;",geography,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly`."
"How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.","SELECT city.city_name, CAST(city.population AS float) / NULLIF(state.population, 0) AS population_ratio FROM city JOIN state ON city.state_name = state.state_name ORDER BY population_ratio DESC NULLS LAST;",geography,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.`."
Get the ratio of population per area for each state,"SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;",geography,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Get the ratio of population per area for each state`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Get the ratio of population per area for each state`."
Which countries have both lakes and rivers?,SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;,geography,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which countries have both lakes and rivers?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which countries have both lakes and rivers?`."
Which states border the state where lake ontario is?,SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE lake.lake_name ilike '%Ontario%';,geography,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which states border the state where lake ontario is?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which states border the state where lake ontario is?`."
"Which lakes have a name that starts with ""Lake""? They should be located in states with an area greater than 1000 square kilometers.",SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND lake.lake_name ilike 'Lake%' ORDER BY lake.lake_name NULLS LAST;,geography,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which lakes have a name that starts with ""Lake""? They should be located in states with an area greater than 1000 square kilometers.`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which lakes have a name that starts with ""Lake""? They should be located in states with an area greater than 1000 square kilometers.`."
What is the highest point in each state and what is the population density of that state?,"SELECT highlow.state_name, highlow.highest_point, state.density FROM highlow JOIN state ON highlow.state_name = state.state_name;",geography,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the highest point in each state and what is the population density of that state?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the highest point in each state and what is the population density of that state?`."
What is the average length of rivers per country in countries with a lake?,"SELECT l.country_name, AVG(r.length) AS average_length FROM river r JOIN lake l ON r.country_name = l.country_name GROUP BY 1;",geography,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average length of rivers per country in countries with a lake?`

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What is the average length of rivers per country in countries with a lake?`."
Which states have fewer than a hundred thousand people?,SELECT state_name FROM state WHERE population < 100000;,geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which states have fewer than a hundred thousand people?`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which states have fewer than a hundred thousand people?`."
Which rivers traverse at least 3 cities/landmarks?,"SELECT river_name FROM river WHERE traverse LIKE '%,%,%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Which rivers traverse at least 3 cities/landmarks?`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Which rivers traverse at least 3 cities/landmarks?`."
What are the names and areas of the lakes in Michigan?,"SELECT lake_name, area FROM lake WHERE state_name ILIKE '%Michigan%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names and areas of the lakes in Michigan?`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What are the names and areas of the lakes in Michigan?`."
What are the names and altitudes of the mountains in Nepal?,"SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name ILIKE '%Nepal%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names and altitudes of the mountains in Nepal?`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `What are the names and altitudes of the mountains in Nepal?`."
Get the cities in the United States and their population,"SELECT city_name, population FROM city WHERE country_name ILIKE '%United States%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,"Generate a postgres query to answer this question: `Get the cities in the United States and their population`

Follow the instructions below to generate the query:
Always filter names using ILIKE

DDL statements:
CREATE TABLE city (
  population bigint, --The population of the city
  city_name text, --The name of the city
  country_name text, --The name of the country where the city is located
  state_name text --The name of the state where the city is located
);
CREATE TABLE lake (
  area double precision, --The area of the lake in square kilometers
  lake_name text, --The name of the lake
  country_name text, --The name of the country where the lake is located
  state_name text --The name of the state where the lake is located (if applicable)
);
CREATE TABLE river (
  length bigint, --The length of the river in meters
  river_name text, --The name of the river. Names exclude the word 'river' e.g. 'Mississippi' instead of 'Mississippi River'
  country_name text, --The name of the country the river flows through
  traverse text --The cities or landmarks the river passes through. Comma delimited and in title case, eg `New York,Albany,Boston`
);
CREATE TABLE state (
  population bigint, --The population of the state
  area double precision, --The area of the state in square kilometers
  density double precision, --The population density of the state in people per square kilometer
  state_name text, --The name of the state
  country_name text, --The name of the country the state belongs to
  capital text --The name of the capital city of the state
);
CREATE TABLE highlow (
  state_name text, --The name of the state
  highest_elevation text, --The highest elevation point in the state in meters above sea level
  lowest_point text, --The lowest elevation point in the state
  highest_point text, --The highest point in the state. If unknown, use 'Unnamed location'.
  lowest_elevation text --The lowest point in the state in meters above sea level
);
CREATE TABLE mountain (
  mountain_altitude bigint, --The altitude of the mountain in meters
  mountain_name text, --The name of the mountain
  country_name text, --The name of the country where the mountain is located
  state_name text --The name of the state or province where the mountain is located (if applicable)
);
CREATE TABLE border_info (
  state_name text, --The name of the state that shares a border with another state or country.
  border text --The name of the state that shares a border with the state specified in the state_name column.
);


Generate a valid postgres query that best answers the question `Get the cities in the United States and their population`."
What is the total number of restaurants serving each type of food?,"SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;",restaurants,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of restaurants serving each type of food?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the total number of restaurants serving each type of food?`."
What is the total count of restaurants in each city?,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;",restaurants,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total count of restaurants in each city?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the total count of restaurants in each city?`."
What is the average rating of restaurants serving each type of food?,"SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC NULLS LAST;",restaurants,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average rating of restaurants serving each type of food?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the average rating of restaurants serving each type of food?`."
How many restaurants serve Italian food in each city?,"SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE restaurant.food_type ILIKE '%Italian%' GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `How many restaurants serve Italian food in each city?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `How many restaurants serve Italian food in each city?`."
How many restaurants are there in each city? Order the results by the number of restaurants in descending order.,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `How many restaurants are there in each city? Order the results by the number of restaurants in descending order.`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `How many restaurants are there in each city? Order the results by the number of restaurants in descending order.`."
Which street has the most number of restaurants?,SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(restaurant_id) DESC LIMIT 1;,restaurants,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `Which street has the most number of restaurants?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `Which street has the most number of restaurants?`."
Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.,SELECT name FROM restaurant WHERE food_type ILIKE '%Italian%' OR city_name ILIKE '%New York%' ORDER BY name NULLS LAST;,restaurants,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.`."
What is the average rating of restaurants in each region? Order the results by the region name.,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY geographic.region NULLS LAST;",restaurants,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average rating of restaurants in each region? Order the results by the region name.`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the average rating of restaurants in each region? Order the results by the region name.`."
What are the names of the top 3 restaurants with the highest ratings?,SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC NULLS LAST LIMIT 3;,restaurants,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the top 3 restaurants with the highest ratings?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What are the names of the top 3 restaurants with the highest ratings?`."
List the restaurants starting from the best ratings to the lowest,"SELECT {name, id}, rating FROM restaurant ORDER BY rating DESC;",restaurants,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `List the restaurants starting from the best ratings to the lowest`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `List the restaurants starting from the best ratings to the lowest`."
What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.,"SELECT COUNT(*)::float / NULLIF((SELECT COUNT(*) FROM restaurant), 0) AS rating_ratio FROM restaurant WHERE rating > 4.5;",restaurants,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.`."
What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?,"SELECT CAST(SUM(CASE WHEN restaurant.rating > 4.0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN restaurant.rating < 4.0 THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant;",restaurants,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?`."
What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?,"SELECT CAST(COUNT(CASE WHEN rating > 4 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN rating < 4 THEN 1 END), 0) AS ratio FROM restaurant WHERE city_name ILIKE 'New York';",restaurants,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?`."
What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively,"SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN LOWER(restaurant.food_type) NOT LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(restaurant.city_name) ILIKE '%san francisco%';",restaurants,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively`."
What is the ratio of Italian restaurants out of all restaurants in Los Angeles?,"SELECT CAST(COUNT(CASE WHEN food_type ILIKE '%Italian%' THEN 1 END) AS FLOAT) / NULLIF(COUNT(food_type), 0) AS ratio FROM restaurant WHERE city_name ILIKE '%Los Angeles%';",restaurants,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of Italian restaurants out of all restaurants in Los Angeles?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the ratio of Italian restaurants out of all restaurants in Los Angeles?`."
"What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count","SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;",restaurants,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count`."
What is the average rating of restaurants that serve Mexican food in each city?,"SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;",restaurants,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average rating of restaurants that serve Mexican food in each city?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the average rating of restaurants that serve Mexican food in each city?`."
What is the average rating of restaurants in each region?,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN restaurant ON geographic.city_name=restaurant.city_name GROUP BY 1;",restaurants,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average rating of restaurants in each region?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What is the average rating of restaurants in each region?`."
How many restaurants serve Italian food in each region?,"SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `How many restaurants serve Italian food in each region?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `How many restaurants serve Italian food in each region?`."
How many restaurants are there in each region?,"SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;",restaurants,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `How many restaurants are there in each region?`

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `How many restaurants are there in each region?`."
Which city has the highest-rated restaurant?,SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating=(SELECT MAX(rating) FROM restaurant);,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `Which city has the highest-rated restaurant?`

Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `Which city has the highest-rated restaurant?`."
What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?,"SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND restaurant.city_name ILIKE '%New York%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?`

Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?`."
What's the name and food type of all the restaurants located on Market St in San Francisco?,"SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE location.street_name ILIKE '%Market St%' AND location.city_name ILIKE '%San Francisco%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What's the name and food type of all the restaurants located on Market St in San Francisco?`

Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What's the name and food type of all the restaurants located on Market St in San Francisco?`."
What are the names of the restaurants that serve Italian food?,SELECT restaurant.name FROM restaurant WHERE LOWER(restaurant.food_type) ILIKE '%italian%';,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the restaurants that serve Italian food?`

Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What are the names of the restaurants that serve Italian food?`."
What are the names of the restaurants in Los Angeles that have a rating higher than 4?,SELECT DISTINCT restaurant.name FROM restaurant WHERE restaurant.city_name ILIKE '%Los Angeles%' AND restaurant.rating > 4 ORDER BY restaurant.name NULLS LAST;,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the restaurants in Los Angeles that have a rating higher than 4?`

Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators

DDL statements:
CREATE TABLE location (
  restaurant_id bigint, --Unique identifier for each restaurant
  house_number bigint, --The number assigned to the building where the restaurant is located
  street_name text, --The name of the street where the restaurant is located
  city_name text --The name of the city where the restaurant is located
);
CREATE TABLE geographic (
  city_name text, --The name of the city
  county text, --The name of the county
  region text --The name of the region
);
CREATE TABLE restaurant (
  id bigint, --Unique identifier for each restaurant
  rating real, --The rating of the restaurant on a scale of 0 to 5
  name text, --The name of the restaurant
  food_type text, --The type of food served at the restaurant
  city_name text --The city where the restaurant is located
);


Generate a valid postgres query that best answers the question `What are the names of the restaurants in Los Angeles that have a rating higher than 4?`."
What is the total number of papers published per year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year NULLS LAST;",scholar,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of papers published per year?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of papers published per year?`."
What is the total number of papers published in each year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year;",scholar,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of papers published in each year?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of papers published in each year?`."
What is the total number of papers associated with each dataset?,"SELECT paperdataset.datasetid, COUNT(DISTINCT paperdataset.paperid) AS total_papers FROM paperdataset GROUP BY paperdataset.datasetid;SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;",scholar,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of papers associated with each dataset?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of papers associated with each dataset?`."
How many keyphrases are associated with each paper?,"SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY keyphrase_count DESC NULLS LAST;SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper p JOIN paperkeyphrase pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC NULLS LAST;",scholar,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many keyphrases are associated with each paper?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many keyphrases are associated with each paper?`."
How many authors have published more than 2 papers?,SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;,scholar,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many authors have published more than 2 papers?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many authors have published more than 2 papers?`."
"Which papers have the highest number of authors, ordered by the number of authors in descending order?","SELECT {paper.paperid, paper.title}, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY {} ORDER BY num_authors DESC;",scholar,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `Which papers have the highest number of authors, ordered by the number of authors in descending order?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `Which papers have the highest number of authors, ordered by the number of authors in descending order?`."
"What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?","SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY paperkeyphrase.paperid ASC NULLS LAST;",scholar,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?`."
"What are the titles of the papers published in the year 2020, ordered alphabetically?",SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY paper.title ASC NULLS LAST;,scholar,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the titles of the papers published in the year 2020, ordered alphabetically?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What are the titles of the papers published in the year 2020, ordered alphabetically?`."
"What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?",SELECT journal.journalname FROM journal ORDER BY LENGTH(journal.journalname) ASC NULLS LAST;,scholar,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?`."
"For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order","SELECT cite.citingpaperid, COUNT(*) AS citation_count FROM cite GROUP BY cite.citingpaperid ORDER BY citation_count DESC NULLS LAST;SELECT p.paperid, p.numciting FROM paper p WHERE p.numciting > 0 ORDER BY p.numciting DESC;SELECT p.title, COUNT(c.citedpaperid) AS num_cited_papers FROM paper p JOIN cite c ON p.paperid = c.citingpaperid GROUP BY p.title ORDER BY num_cited_papers DESC;",scholar,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order`."
What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?,"SELECT CAST(COUNT(DISTINCT CASE WHEN keyphrase_count > 1 THEN subquery.paperid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN keyphrase_count =1 THEN subquery.paperid END), 0) AS ratio FROM (SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid) AS subquery;",scholar,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?`."
What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?,"SELECT CAST(COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END), 0) AS ratio FROM paper;",scholar,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?`."
What is the ratio of papers published in the year 2020 to the total number of papers in the database?,"SELECT CAST(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) AS FLOAT) / NULLIF(COUNT(paper.paperid), 0) AS ratio FROM paper;",scholar,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of papers published in the year 2020 to the total number of papers in the database?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the ratio of papers published in the year 2020 to the total number of papers in the database?`."
What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?,"SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;",scholar,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?`."
What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?,"SELECT CAST(COUNT(CASE WHEN dataset_count > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN dataset_count = 1 THEN 1 END), 0) AS ratio FROM (SELECT paperdataset.paperid, COUNT(paperdataset.datasetid) AS dataset_count FROM paperdataset GROUP BY paperdataset.paperid) AS subquery;",scholar,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?`."
"Which papers are associated with the keyphrase ""Machine Learning""?","SELECT {paper.title,paper.paperid} FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%Machine Learning%';",scholar,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `Which papers are associated with the keyphrase ""Machine Learning""?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `Which papers are associated with the keyphrase ""Machine Learning""?`."
"Which authors have published the most papers, ordered by the number of papers they have published in descending order?","SELECT {author.authorname, author.authorid}, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY {} ORDER BY number_of_papers DESC NULLS LAST;",scholar,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `Which authors have published the most papers, ordered by the number of papers they have published in descending order?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `Which authors have published the most papers, ordered by the number of papers they have published in descending order?`."
"What is the total number of unique keyphrases associated with papers published in the journal with ""IEEE Transactions"" in its name?",SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE journal.journalname ILIKE '%IEEE Transactions%';,scholar,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of unique keyphrases associated with papers published in the journal with ""IEEE Transactions"" in its name?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of unique keyphrases associated with papers published in the journal with ""IEEE Transactions"" in its name?`."
"What is the total number of papers published in each journal, ordered by the journal name?","SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY journal.journalname NULLS LAST;",scholar,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of papers published in each journal, ordered by the journal name?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the total number of papers published in each journal, ordered by the journal name?`."
"How many papers cite each paper in the dataset named ""COVID-19 Research""?","SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE datasetname ILIKE '%COVID-19 Research%') GROUP BY paperdataset.paperid ORDER BY citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper p JOIN paperdataset pd ON p.paperid = pd.paperid JOIN cite c ON p.paperid = c.citedpaperid JOIN dataset d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC NULLS LAST;",scholar,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many papers cite each paper in the dataset named ""COVID-19 Research""?`

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many papers cite each paper in the dataset named ""COVID-19 Research""?`."
"What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?","SELECT venue.venuename, COUNT(DISTINCT paper.paperid) FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE paper.venueid = (SELECT venueid FROM paper WHERE paperid = 2 ) GROUP BY venue.venuename;",scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings using ILIKE
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?`

Follow the instructions below to generate the query:
Always filter strings using ILIKE

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?`."
"What are the names of the authors who wrote the paper with the title ""The Effects of Climate Change on Agriculture""?",SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';,scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the authors who wrote the paper with the title ""The Effects of Climate Change on Agriculture""?`

Follow the instructions below to generate the query:
Always filter strings with an exact match

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `What are the names of the authors who wrote the paper with the title ""The Effects of Climate Change on Agriculture""?`."
"How many papers were published in the journal ""nature"" in the year 2020?",SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND journal.journalname ILIKE '%nature%';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter strings with case-insensitive matching
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many papers were published in the journal ""nature"" in the year 2020?`

Follow the instructions below to generate the query:
Filter strings with case-insensitive matching

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many papers were published in the journal ""nature"" in the year 2020?`."
"How many papers are associated with the keyphrase ""machine learning"" and were published in the journal named ""IEEE Transactions on Pattern Analysis and Machine Intelligence""?",SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%machine learning%' AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names, journal names, using exact matches.
Filter keyphrases with case-insensitive matching.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many papers are associated with the keyphrase ""machine learning"" and were published in the journal named ""IEEE Transactions on Pattern Analysis and Machine Intelligence""?`

Follow the instructions below to generate the query:
Filter paper names, journal names, using exact matches.
Filter keyphrases with case-insensitive matching.

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many papers are associated with the keyphrase ""machine learning"" and were published in the journal named ""IEEE Transactions on Pattern Analysis and Machine Intelligence""?`."
"How many authors wrote papers that were published in the journal ""Science"" in the year 2020?",SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE journal.journalname ILIKE '%Science%' AND paper.year = 2020;,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names using exact matches.
Filter keyphrases and journal names with case-insensitive matching.
",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,"Generate a postgres query to answer this question: `How many authors wrote papers that were published in the journal ""Science"" in the year 2020?`

Follow the instructions below to generate the query:
Filter paper names using exact matches.
Filter keyphrases and journal names with case-insensitive matching.

DDL statements:
CREATE TABLE cite (
  citingpaperid bigint, --The ID of the paper that is doing the citing.
  citedpaperid bigint --The ID of the paper that is being cited.
);
CREATE TABLE field (
  fieldid bigint --Unique identifier for each field in the table
);
CREATE TABLE paper (
  year bigint, --The year the paper was published.
  journalid bigint, --The ID of the journal where the paper was published.
  venueid bigint, --The ID of the venue where the paper was published.
  paperid bigint, --The unique ID of the paper.
  numciting bigint, --The number of papers that this paper cites.
  numcitedby bigint, --The number of papers that cite this paper.
  title text --The title of the paper, enclosed in double quotes if it contains commas.
);
CREATE TABLE venue (
  venueid bigint, --Unique identifier for each venue
  venuename text --Name of the venue
);
CREATE TABLE author (
  authorid bigint, --Unique identifier for each author
  authorname text --Name of the author
);
CREATE TABLE writes (
  paperid bigint, --The unique identifier for a paper in the writes table.
  authorid bigint --The unique identifier for an author in the writes table.
);
CREATE TABLE dataset (
  datasetid bigint, --Unique identifier for each dataset in the table
  datasetname text --Name of the dataset
);
CREATE TABLE journal (
  journalid bigint, --Unique identifier for each journal entry
  journalname text --Name or title of the journal
);
CREATE TABLE keyphrase (
  keyphraseid bigint, --Unique identifier for each keyphrase
  keyphrasename text --The actual keyphrase text
);
CREATE TABLE paperfield (
  fieldid bigint, --Unique identifier for each field in the table
  paperid bigint --Unique identifier for each paper in the table
);
CREATE TABLE paperdataset (
  paperid bigint, --Unique identifier for each paper in the dataset
  datasetid bigint --Unique identifier for each dataset that the paper belongs to
);
CREATE TABLE paperkeyphrase (
  paperid bigint, --The ID of the paper associated with the keyphrase.
  keyphraseid bigint --The ID of the keyphrase associated with the paper.
);


Generate a valid postgres query that best answers the question `How many authors wrote papers that were published in the journal ""Science"" in the year 2020?`."
How many reviews were written for businesses located in California in the last 10 months?,"SELECT count(*) AS review_count FROM review r JOIN business b ON r.business_id = b.business_id WHERE b.state = 'CA' AND (r.year * 12 + extract(MONTH FROM to_date(r.month, 'Month'))) >= (extract(YEAR FROM CURRENT_DATE) * 12 + extract(MONTH FROM CURRENT_DATE) - 10);",yelp,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many reviews were written for businesses located in California in the last 10 months?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many reviews were written for businesses located in California in the last 10 months?`."
What is the total number of check-ins on the 2 days before Saturday?,"SELECT sum(COUNT) AS total_checkins FROM checkin WHERE DAY IN ('Thursday', 'Friday') ;",yelp,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of check-ins on the 2 days before Saturday?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of check-ins on the 2 days before Saturday?`."
How many reviews were there 2 months before the review with id 3?,"SELECT COUNT(*) AS review_count FROM review WHERE TO_DATE(CAST(review.year AS TEXT) || '-' || CASE review.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') = (SELECT TO_DATE(CAST(r.year AS TEXT) || '-' || CASE r.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') - INTERVAL '2 months' FROM review r WHERE r.rid = 3);",yelp,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many reviews were there 2 months before the review with id 3?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many reviews were there 2 months before the review with id 3?`."
What was the message that came with the tip made exactly 2 months after March 2021?,SELECT text AS message FROM tip WHERE MONTH ILIKE '%May%' AND YEAR = 2021 LIMIT 1;,yelp,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What was the message that came with the tip made exactly 2 months after March 2021?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What was the message that came with the tip made exactly 2 months after March 2021?`."
How many months between June 2021 and December 2021 had reviews?,SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;,yelp,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many months between June 2021 and December 2021 had reviews?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many months between June 2021 and December 2021 had reviews?`."
"Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?","SELECT {neighbourhood.neighbourhood_name, neighbourhood.id}, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY {} ORDER BY business_count DESC NULLS LAST;",yelp,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?`."
"What is the total number of check-ins for each day of the week for the business with ID ""abc123""?","SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin WHERE checkin.business_id = 'abc123' GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of check-ins for each day of the week for the business with ID ""abc123""?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of check-ins for each day of the week for the business with ID ""abc123""?`."
What is the total count of check-ins for each business id?,"SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total count of check-ins for each business id?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total count of check-ins for each business id?`."
Return the name and average rating for each business in new york,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%NEW YORK%' GROUP BY business.name;",yelp,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the name and average rating for each business in new york`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `Return the name and average rating for each business in new york`."
How many check-ins occurred on each day of the week?,"SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many check-ins occurred on each day of the week?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many check-ins occurred on each day of the week?`."
Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%New York%' GROUP BY business.name, business.business_id ORDER BY average_rating DESC NULLS LAST;",yelp,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.`."
What is the latitude and longitude of the business with the highest rating?,"SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY AVG(review.rating) DESC LIMIT 1;",yelp,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the latitude and longitude of the business with the highest rating?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the latitude and longitude of the business with the highest rating?`."
What are the top 3 businesses in terms of review count?,"SELECT {business.name, business.business_id, business.bid}, business.review_count FROM business ORDER BY business.review_count DESC NULLS LAST LIMIT 3;",yelp,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 3 businesses in terms of review count?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What are the top 3 businesses in terms of review count?`."
"What are the names of the businesses in the database, ordered alphabetically?",SELECT business.name FROM business ORDER BY business.name ASC NULLS LAST;,yelp,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the names of the businesses in the database, ordered alphabetically?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What are the names of the businesses in the database, ordered alphabetically?`."
"How many reviews were posted in each month of the year 2021, ordered by the month?","SELECT review.month, COUNT(review.rid) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.month ORDER BY TO_DATE(review.month, 'Month') NULLS LAST;",yelp,order_by,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many reviews were posted in each month of the year 2021, ordered by the month?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many reviews were posted in each month of the year 2021, ordered by the month?`."
What is the ratio of the number of businesses in each state to the total number of businesses in the database?,"SELECT business.state, COUNT(business.business_id) / NULLIF(CAST((SELECT COUNT(*) FROM business) AS FLOAT), 0) AS ratio FROM business GROUP BY business.state;",yelp,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of the number of businesses in each state to the total number of businesses in the database?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the ratio of the number of businesses in each state to the total number of businesses in the database?`."
What is the ratio of open businesses to closed businesses in the city of San Francisco?,"SELECT CAST(SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM business WHERE LOWER(business.city) ILIKE '%san francisco%';",yelp,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of open businesses to closed businesses in the city of San Francisco?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the ratio of open businesses to closed businesses in the city of San Francisco?`."
"What is the ratio of check-ins on weekends to check-ins on weekdays for the business named ""Mark's Bistro""?","SELECT CAST(SUM(CASE WHEN checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN checkin.day NOT IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END), 0) AS ratio FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name ILIKE '%Mark''s Bistro%';",yelp,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of check-ins on weekends to check-ins on weekdays for the business named ""Mark's Bistro""?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the ratio of check-ins on weekends to check-ins on weekdays for the business named ""Mark's Bistro""?`."
What is the ratio of businesses in the state of California to businesses in the state of New York?,"SELECT CAST(COUNT(CASE WHEN business.state = 'CA' THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN business.state = 'NY' THEN 1 END), 0) AS ratio FROM business;",yelp,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the ratio of businesses in the state of California to businesses in the state of New York?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the ratio of businesses in the state of California to businesses in the state of New York?`."
"How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?","SELECT {category.category_name, category.id}, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY {} ORDER BY ratio DESC NULLS LAST;",yelp,ratio,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?`."
"Which users have posted reviews for businesses located in the neighbourhood of ""Downtown"" and how many reviews have they posted?","SELECT {users.name, users.user_id}, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE neighbourhood.neighbourhood_name ILIKE '%Downtown%' GROUP BY {} ORDER BY review_count DESC NULLS LAST;",yelp,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `Which users have posted reviews for businesses located in the neighbourhood of ""Downtown"" and how many reviews have they posted?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `Which users have posted reviews for businesses located in the neighbourhood of ""Downtown"" and how many reviews have they posted?`."
"What is the total number of reviews for each category in the state of ""California""?","SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of reviews for each category in the state of ""California""?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of reviews for each category in the state of ""California""?`."
What is the total number of reviews for each business category?,"SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of reviews for each business category?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of reviews for each business category?`."
What is the total number of check-ins for each business in the state of California?,"SELECT {business.business_id, business.name, business.bid}, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_checkins DESC NULLS LAST;",yelp,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of check-ins for each business in the state of California?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of check-ins for each business in the state of California?`."
What are the top 2 categories of businesses with the highest average rating?,"SELECT {category.category_name, category.id} FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY {} ORDER BY AVG(business_rating.average_rating) DESC NULLS LAST LIMIT 2;",yelp,table_join,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What are the top 2 categories of businesses with the highest average rating?`

DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What are the top 2 categories of businesses with the highest average rating?`."
"What is the total number of reviews posted in the year 2021 for businesses in the category ""Cafe""?",SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND category.category_name ILIKE '%Cafe%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the total number of reviews posted in the year 2021 for businesses in the category ""Cafe""?`

Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.


DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the total number of reviews posted in the year 2021 for businesses in the category ""Cafe""?`."
What is the average rating of businesses in the city of San Francisco?,"SELECT AVG(sf.average_rating) AS sf_average_rating FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) ILIKE '%san francisco%' GROUP BY business.business_id) AS sf;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
The rating of businesses in a city refers to the average rating of the businesses in that city.
I.e., you must compute the average rating of each business before computing the average rating of businesses in the city.

",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the average rating of businesses in the city of San Francisco?`

Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
The rating of businesses in a city refers to the average rating of the businesses in that city.
I.e., you must compute the average rating of each business before computing the average rating of businesses in the city.


DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `What is the average rating of businesses in the city of San Francisco?`."
How many reviews were posted for each business id in the year 2021?,"SELECT review.business_id, COUNT(*) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.business_id ORDER BY review_count DESC NULLS LAST;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many reviews were posted for each business id in the year 2021?`

Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.


DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many reviews were posted for each business id in the year 2021?`."
"How many reviews were posted by users with the name ""Sarah Williams"" in the month of April 2021?",SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE users.name ILIKE '%Sarah Williams%' AND review.month = 'April' AND review.year = 2021;,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many reviews were posted by users with the name ""Sarah Williams"" in the month of April 2021?`

Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.


DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many reviews were posted by users with the name ""Sarah Williams"" in the month of April 2021?`."
How many check-ins occurred on Mondays at businesses in the state of California?,SELECT SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' AND checkin.day ILIKE '%Monday%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,"Generate a postgres query to answer this question: `How many check-ins occurred on Mondays at businesses in the state of California?`

Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.


DDL statements:
CREATE TABLE tip (
  year bigint, --Year when the tip was created
  tip_id bigint, --Unique identifier for the tip
  month text, --Month when the tip was created. Eg. 'January', 'February', etc.
  user_id text, --Unique identifier for the user who created the tip
  business_id text, --Unique identifier for the business where the tip was created.
  text text --Text content of the tip. All apostrophes use ’ instead of ' to avoid SQL errors.
);
CREATE TABLE users (
  uid bigint, --Unique identifier for each user
  user_id text, --Unique user ID assigned by the system
  name text --Name of the user
);
CREATE TABLE review (
  rating real, --The rating given by the user for the business, on a scale of 1 to 5.
  rid bigint, --The unique identifier for each review.
  year bigint, --The year in which the review was posted.
  month text, --The month in which the review was posted. Eg. 'January', 'February', etc.
  text text, --The text of the review. All apostrophes use ’ instead of ' to avoid SQL errors.
  business_id text, --The unique identifier for the business being reviewed.
  user_id text --The unique identifier for the user who posted the review.
);
CREATE TABLE checkin (
  cid bigint, --Unique identifier for the daily check-in count
  count bigint, --Total number of check-ins at a business on a given day
  business_id text, --Unique identifier for the business where the check-in occurred
  day text --Day of the week when the check-ins occurred. Eg. 'Monday', 'Tuesday', etc.
);
CREATE TABLE business (
  review_count bigint, --The number of reviews for the business
  is_open bigint, --Indicates whether the business is currently open or closed (1 for open, 0 for closed)
  bid bigint, --The unique identifier for the business
  city text, --The city where the business is located
  latitude text, --The latitude of the business location
  longitude text, --The longitude of the business location
  state text, --The US state where the business is located, represented by two-letter abbreviations (eg. 'CA', 'NV', 'NY', etc.)
  business_id text, --The unique identifier for the business
  name text, --The name of the business. All apostrophes use ’ instead of ' to avoid SQL errors.
  full_address text --The full address of the business
);
CREATE TABLE category (
  id bigint, --Unique identifier for each category
  business_id text, --Identifier for the business associated with the category
  category_name text --Name of the category. Eg 'Bistro', 'Diner', 'Pizza'
);
CREATE TABLE neighbourhood (
  id bigint, --Unique identifier for each neighbourhood
  business_id text, --Identifier for each business in the neighbourhood
  neighbourhood_name text --Name of the neighbourhood where the business is located
);


Generate a valid postgres query that best answers the question `How many check-ins occurred on Mondays at businesses in the state of California?`."
"Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.","WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE sbTxDateTime::date = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer c JOIN SellTransactions st ON c.sbCustId = st.sbTxCustId ORDER BY st.num_tx DESC LIMIT 1;",broker,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.`

DDL statements:
CREATE TABLE sbCustomer (
  sbCustId varchar(20),
  sbCustName varchar(100),
  sbCustEmail varchar(100),
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date,
  sbCustStatus varchar(20) --possible values: active, inactive, suspended, closed
);
CREATE TABLE sbTicker (
  sbTickerId varchar(20),
  sbTickerSymbol varchar(10),
  sbTickerName varchar(100),
  sbTickerType varchar(20), --possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50),
  sbTickerCurrency varchar(10),
  sbTickerDb2x varchar(20), --2 letter exchange code
  sbTickerIsActive boolean
);
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20),
  sbDpDate date,
  sbDpOpen numeric(10,2),
  sbDpHigh numeric(10,2),
  sbDpLow numeric(10,2),
  sbDpClose numeric(10,2),
  sbDpVolume bigint,
  sbDpEpochMs bigint, --epoch milliseconds for timestamp
  sbDpSource varchar(50)
);
CREATE TABLE sbTransaction (
  sbTxId varchar(50),
  sbTxCustId varchar(20),
  sbTxTickerId varchar(20),
  sbTxDateTime timestamp,
  sbTxType varchar(20), --possible values: buy, sell
  sbTxShares numeric(10,2),
  sbTxPrice numeric(10,2),
  sbTxAmount numeric(10,2),
  sbTxCcy varchar(10), --transaction currency
  sbTxTax numeric(10,2),
  sbTxCommission numeric(10,2),
  sbTxKpx varchar(10), --internal code
  sbTxSettlementDateStr varchar(25), --settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) --possible values: success, fail, pending
);


Generate a valid postgres query that best answers the question `Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.`."
What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?,"SELECT DATE_TRUNC('month', sbTxDateTime) AS MONTH, AVG(sbTxPrice) AS avg_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY MONTH ORDER BY MONTH;",broker,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,"Generate a postgres query to answer this question: `What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?`

DDL statements:
CREATE TABLE sbCustomer (
  sbCustId varchar(20),
  sbCustName varchar(100),
  sbCustEmail varchar(100),
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date,
  sbCustStatus varchar(20) --possible values: active, inactive, suspended, closed
);
CREATE TABLE sbTicker (
  sbTickerId varchar(20),
  sbTickerSymbol varchar(10),
  sbTickerName varchar(100),
  sbTickerType varchar(20), --possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50),
  sbTickerCurrency varchar(10),
  sbTickerDb2x varchar(20), --2 letter exchange code
  sbTickerIsActive boolean
);
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20),
  sbDpDate date,
  sbDpOpen numeric(10,2),
  sbDpHigh numeric(10,2),
  sbDpLow numeric(10,2),
  sbDpClose numeric(10,2),
  sbDpVolume bigint,
  sbDpEpochMs bigint, --epoch milliseconds for timestamp
  sbDpSource varchar(50)
);
CREATE TABLE sbTransaction (
  sbTxId varchar(50),
  sbTxCustId varchar(20),
  sbTxTickerId varchar(20),
  sbTxDateTime timestamp,
  sbTxType varchar(20), --possible values: buy, sell
  sbTxShares numeric(10,2),
  sbTxPrice numeric(10,2),
  sbTxAmount numeric(10,2),
  sbTxCcy varchar(10), --transaction currency
  sbTxTax numeric(10,2),
  sbTxCommission numeric(10,2),
  sbTxKpx varchar(10), --internal code
  sbTxSettlementDateStr varchar(25), --settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) --possible values: success, fail, pending
);


Generate a valid postgres query that best answers the question `What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?`."
Lowest daily closest price for symbol `VTI` in the past 7 days,SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7 days';,broker,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,"Generate a postgres query to answer this question: `Lowest daily closest price for symbol `VTI` in the past 7 days`

DDL statements:
CREATE TABLE sbCustomer (
  sbCustId varchar(20),
  sbCustName varchar(100),
  sbCustEmail varchar(100),
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date,
  sbCustStatus varchar(20) --possible values: active, inactive, suspended, closed
);
CREATE TABLE sbTicker (
  sbTickerId varchar(20),
  sbTickerSymbol varchar(10),
  sbTickerName varchar(100),
  sbTickerType varchar(20), --possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50),
  sbTickerCurrency varchar(10),
  sbTickerDb2x varchar(20), --2 letter exchange code
  sbTickerIsActive boolean
);
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20),
  sbDpDate date,
  sbDpOpen numeric(10,2),
  sbDpHigh numeric(10,2),
  sbDpLow numeric(10,2),
  sbDpClose numeric(10,2),
  sbDpVolume bigint,
  sbDpEpochMs bigint, --epoch milliseconds for timestamp
  sbDpSource varchar(50)
);
CREATE TABLE sbTransaction (
  sbTxId varchar(50),
  sbTxCustId varchar(20),
  sbTxTickerId varchar(20),
  sbTxDateTime timestamp,
  sbTxType varchar(20), --possible values: buy, sell
  sbTxShares numeric(10,2),
  sbTxPrice numeric(10,2),
  sbTxAmount numeric(10,2),
  sbTxCcy varchar(10), --transaction currency
  sbTxTax numeric(10,2),
  sbTxCommission numeric(10,2),
  sbTxKpx varchar(10), --internal code
  sbTxSettlementDateStr varchar(25), --settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) --possible values: success, fail, pending
);


Generate a valid postgres query that best answers the question `Lowest daily closest price for symbol `VTI` in the past 7 days`."
Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.,"SELECT c.sbCustId, MIN(t.sbTxDateTime) - c.sbCustJoinDate AS DaysFromJoinToFirstTransaction FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId",broker,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.`

DDL statements:
CREATE TABLE sbCustomer (
  sbCustId varchar(20),
  sbCustName varchar(100),
  sbCustEmail varchar(100),
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date,
  sbCustStatus varchar(20) --possible values: active, inactive, suspended, closed
);
CREATE TABLE sbTicker (
  sbTickerId varchar(20),
  sbTickerSymbol varchar(10),
  sbTickerName varchar(100),
  sbTickerType varchar(20), --possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50),
  sbTickerCurrency varchar(10),
  sbTickerDb2x varchar(20), --2 letter exchange code
  sbTickerIsActive boolean
);
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20),
  sbDpDate date,
  sbDpOpen numeric(10,2),
  sbDpHigh numeric(10,2),
  sbDpLow numeric(10,2),
  sbDpClose numeric(10,2),
  sbDpVolume bigint,
  sbDpEpochMs bigint, --epoch milliseconds for timestamp
  sbDpSource varchar(50)
);
CREATE TABLE sbTransaction (
  sbTxId varchar(50),
  sbTxCustId varchar(20),
  sbTxTickerId varchar(20),
  sbTxDateTime timestamp,
  sbTxType varchar(20), --possible values: buy, sell
  sbTxShares numeric(10,2),
  sbTxPrice numeric(10,2),
  sbTxAmount numeric(10,2),
  sbTxCcy varchar(10), --transaction currency
  sbTxTax numeric(10,2),
  sbTxCommission numeric(10,2),
  sbTxKpx varchar(10), --internal code
  sbTxSettlementDateStr varchar(25), --settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) --possible values: success, fail, pending
);


Generate a valid postgres query that best answers the question `Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.`."
number of transactions by users who joined in the past 70 days,SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction t JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;,broker,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,"Generate a postgres query to answer this question: `number of transactions by users who joined in the past 70 days`

DDL statements:
CREATE TABLE sbCustomer (
  sbCustId varchar(20),
  sbCustName varchar(100),
  sbCustEmail varchar(100),
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date,
  sbCustStatus varchar(20) --possible values: active, inactive, suspended, closed
);
CREATE TABLE sbTicker (
  sbTickerId varchar(20),
  sbTickerSymbol varchar(10),
  sbTickerName varchar(100),
  sbTickerType varchar(20), --possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50),
  sbTickerCurrency varchar(10),
  sbTickerDb2x varchar(20), --2 letter exchange code
  sbTickerIsActive boolean
);
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20),
  sbDpDate date,
  sbDpOpen numeric(10,2),
  sbDpHigh numeric(10,2),
  sbDpLow numeric(10,2),
  sbDpClose numeric(10,2),
  sbDpVolume bigint,
  sbDpEpochMs bigint, --epoch milliseconds for timestamp
  sbDpSource varchar(50)
);
CREATE TABLE sbTransaction (
  sbTxId varchar(50),
  sbTxCustId varchar(20),
  sbTxTickerId varchar(20),
  sbTxDateTime timestamp,
  sbTxType varchar(20), --possible values: buy, sell
  sbTxShares numeric(10,2),
  sbTxPrice numeric(10,2),
  sbTxAmount numeric(10,2),
  sbTxCcy varchar(10), --transaction currency
  sbTxTax numeric(10,2),
  sbTxCommission numeric(10,2),
  sbTxKpx varchar(10), --internal code
  sbTxSettlementDateStr varchar(25), --settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) --possible values: success, fail, pending
);


Generate a valid postgres query that best answers the question `number of transactions by users who joined in the past 70 days`."
"Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment","SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events ae JOIN treatments t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10 days';",derm_treatment,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment`

DDL statements:
CREATE TABLE doctors (
  doc_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, --possible values: dermatology, immunology, general
  year_reg INT, --year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) --board certification number
);
CREATE TABLE patients (
  patient_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), --Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2),
  addr_zip VARCHAR(10),
  ins_type TEXT, --Insurance type. Possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20), --Insurance policy number
  height_cm FLOAT,
  weight_kg FLOAT
);
CREATE TABLE drugs (
  drug_id SERIAL,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, --possible values: biologic, small molecule, topical
  moa TEXT, --mechanism of action
  fda_appr_dt DATE, --FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, --possible values: oral, injection, topical
  dos_amt DECIMAL(10,2), --recommended dosage amount
  dos_unit VARCHAR(20), --recommended dosage unit
  dos_freq_hrs INT, --recommended number of hours between dosages
  ndc VARCHAR(20) --National Drug Code
);
CREATE TABLE diagnoses (
  diag_id SERIAL,
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);
CREATE TABLE treatments (
  treatment_id SERIAL,
  patient_id INT,
  doc_id INT,
  drug_id INT,
  diag_id INT,
  start_dt DATE,
  end_dt DATE, --NULL if treatment is ongoing
  is_placebo BOOLEAN,
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT --possible values: mg, ml, g
);
CREATE TABLE outcomes (
  outcome_id SERIAL,
  treatment_id INT,
  assess_dt DATE,
  day7_lesion_cnt INT, --lesion counts on day 7.
  day30_lesion_cnt INT,
  day100_lesion_cnt INT,
  day7_pasi_score DECIMAL(4,1), --PASI score range 0-72
  day30_pasi_score DECIMAL(4,1),
  day100_pasi_score DECIMAL(4,1),
  day7_tewl DECIMAL(5,2), --in g/m^2/h
  day30_tewl DECIMAL(5,2),
  day100_tewl DECIMAL(5,2),
  day7_itch_vas INT, --visual analog scale 0-100
  day30_itch_vas INT,
  day100_itch_vas INT,
  day7_hfg DECIMAL(4,1), --hair growth factor range 0-5
  day30_hfg DECIMAL(4,1),
  day100_hfg DECIMAL(4,1)
);
CREATE TABLE adverse_events (
  id SERIAL, --1 row per adverse event per treatment_id
  treatment_id INT,
  reported_dt DATE,
  description TEXT
);
CREATE TABLE concomitant_meds (
  id SERIAL, --1 row per med per treatment_id
  treatment_id INT,
  med_name VARCHAR(100),
  start_dt TEXT, --YYYY-MM-DD
  end_dt TEXT, --YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, --possible values: mg, ml, g
  freq_hrs INT
);


Generate a valid postgres query that best answers the question `Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment`."
"List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.","WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY t.start_dt ASC) AS rn FROM doctors d JOIN treatments t ON d.doc_id = t.doc_id WHERE d.year_reg = EXTRACT(YEAR FROM CURRENT_DATE) - 2 ) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;",derm_treatment,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,"Generate a postgres query to answer this question: `List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.`

DDL statements:
CREATE TABLE doctors (
  doc_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, --possible values: dermatology, immunology, general
  year_reg INT, --year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) --board certification number
);
CREATE TABLE patients (
  patient_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), --Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2),
  addr_zip VARCHAR(10),
  ins_type TEXT, --Insurance type. Possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20), --Insurance policy number
  height_cm FLOAT,
  weight_kg FLOAT
);
CREATE TABLE drugs (
  drug_id SERIAL,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, --possible values: biologic, small molecule, topical
  moa TEXT, --mechanism of action
  fda_appr_dt DATE, --FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, --possible values: oral, injection, topical
  dos_amt DECIMAL(10,2), --recommended dosage amount
  dos_unit VARCHAR(20), --recommended dosage unit
  dos_freq_hrs INT, --recommended number of hours between dosages
  ndc VARCHAR(20) --National Drug Code
);
CREATE TABLE diagnoses (
  diag_id SERIAL,
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);
CREATE TABLE treatments (
  treatment_id SERIAL,
  patient_id INT,
  doc_id INT,
  drug_id INT,
  diag_id INT,
  start_dt DATE,
  end_dt DATE, --NULL if treatment is ongoing
  is_placebo BOOLEAN,
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT --possible values: mg, ml, g
);
CREATE TABLE outcomes (
  outcome_id SERIAL,
  treatment_id INT,
  assess_dt DATE,
  day7_lesion_cnt INT, --lesion counts on day 7.
  day30_lesion_cnt INT,
  day100_lesion_cnt INT,
  day7_pasi_score DECIMAL(4,1), --PASI score range 0-72
  day30_pasi_score DECIMAL(4,1),
  day100_pasi_score DECIMAL(4,1),
  day7_tewl DECIMAL(5,2), --in g/m^2/h
  day30_tewl DECIMAL(5,2),
  day100_tewl DECIMAL(5,2),
  day7_itch_vas INT, --visual analog scale 0-100
  day30_itch_vas INT,
  day100_itch_vas INT,
  day7_hfg DECIMAL(4,1), --hair growth factor range 0-5
  day30_hfg DECIMAL(4,1),
  day100_hfg DECIMAL(4,1)
);
CREATE TABLE adverse_events (
  id SERIAL, --1 row per adverse event per treatment_id
  treatment_id INT,
  reported_dt DATE,
  description TEXT
);
CREATE TABLE concomitant_meds (
  id SERIAL, --1 row per med per treatment_id
  treatment_id INT,
  med_name VARCHAR(100),
  start_dt TEXT, --YYYY-MM-DD
  end_dt TEXT, --YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, --possible values: mg, ml, g
  freq_hrs INT
);


Generate a valid postgres query that best answers the question `List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.`."
what is average age of all registered male patients with private insurance currently?,"SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth))) AS avg_age FROM patients WHERE gender = 'Male' AND ins_type = 'private';",derm_treatment,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,"Generate a postgres query to answer this question: `what is average age of all registered male patients with private insurance currently?`

DDL statements:
CREATE TABLE doctors (
  doc_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, --possible values: dermatology, immunology, general
  year_reg INT, --year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) --board certification number
);
CREATE TABLE patients (
  patient_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), --Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2),
  addr_zip VARCHAR(10),
  ins_type TEXT, --Insurance type. Possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20), --Insurance policy number
  height_cm FLOAT,
  weight_kg FLOAT
);
CREATE TABLE drugs (
  drug_id SERIAL,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, --possible values: biologic, small molecule, topical
  moa TEXT, --mechanism of action
  fda_appr_dt DATE, --FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, --possible values: oral, injection, topical
  dos_amt DECIMAL(10,2), --recommended dosage amount
  dos_unit VARCHAR(20), --recommended dosage unit
  dos_freq_hrs INT, --recommended number of hours between dosages
  ndc VARCHAR(20) --National Drug Code
);
CREATE TABLE diagnoses (
  diag_id SERIAL,
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);
CREATE TABLE treatments (
  treatment_id SERIAL,
  patient_id INT,
  doc_id INT,
  drug_id INT,
  diag_id INT,
  start_dt DATE,
  end_dt DATE, --NULL if treatment is ongoing
  is_placebo BOOLEAN,
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT --possible values: mg, ml, g
);
CREATE TABLE outcomes (
  outcome_id SERIAL,
  treatment_id INT,
  assess_dt DATE,
  day7_lesion_cnt INT, --lesion counts on day 7.
  day30_lesion_cnt INT,
  day100_lesion_cnt INT,
  day7_pasi_score DECIMAL(4,1), --PASI score range 0-72
  day30_pasi_score DECIMAL(4,1),
  day100_pasi_score DECIMAL(4,1),
  day7_tewl DECIMAL(5,2), --in g/m^2/h
  day30_tewl DECIMAL(5,2),
  day100_tewl DECIMAL(5,2),
  day7_itch_vas INT, --visual analog scale 0-100
  day30_itch_vas INT,
  day100_itch_vas INT,
  day7_hfg DECIMAL(4,1), --hair growth factor range 0-5
  day30_hfg DECIMAL(4,1),
  day100_hfg DECIMAL(4,1)
);
CREATE TABLE adverse_events (
  id SERIAL, --1 row per adverse event per treatment_id
  treatment_id INT,
  reported_dt DATE,
  description TEXT
);
CREATE TABLE concomitant_meds (
  id SERIAL, --1 row per med per treatment_id
  treatment_id INT,
  med_name VARCHAR(100),
  start_dt TEXT, --YYYY-MM-DD
  end_dt TEXT, --YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, --possible values: mg, ml, g
  freq_hrs INT
);


Generate a valid postgres query that best answers the question `what is average age of all registered male patients with private insurance currently?`."
"show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.","SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM treatments t JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND TO_DATE(cm.start_dt, 'YYYY-MM-DD') BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 WEEK' ORDER BY t.treatment_id;",derm_treatment,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,"Generate a postgres query to answer this question: `show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.`

DDL statements:
CREATE TABLE doctors (
  doc_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, --possible values: dermatology, immunology, general
  year_reg INT, --year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) --board certification number
);
CREATE TABLE patients (
  patient_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), --Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2),
  addr_zip VARCHAR(10),
  ins_type TEXT, --Insurance type. Possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20), --Insurance policy number
  height_cm FLOAT,
  weight_kg FLOAT
);
CREATE TABLE drugs (
  drug_id SERIAL,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, --possible values: biologic, small molecule, topical
  moa TEXT, --mechanism of action
  fda_appr_dt DATE, --FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, --possible values: oral, injection, topical
  dos_amt DECIMAL(10,2), --recommended dosage amount
  dos_unit VARCHAR(20), --recommended dosage unit
  dos_freq_hrs INT, --recommended number of hours between dosages
  ndc VARCHAR(20) --National Drug Code
);
CREATE TABLE diagnoses (
  diag_id SERIAL,
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);
CREATE TABLE treatments (
  treatment_id SERIAL,
  patient_id INT,
  doc_id INT,
  drug_id INT,
  diag_id INT,
  start_dt DATE,
  end_dt DATE, --NULL if treatment is ongoing
  is_placebo BOOLEAN,
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT --possible values: mg, ml, g
);
CREATE TABLE outcomes (
  outcome_id SERIAL,
  treatment_id INT,
  assess_dt DATE,
  day7_lesion_cnt INT, --lesion counts on day 7.
  day30_lesion_cnt INT,
  day100_lesion_cnt INT,
  day7_pasi_score DECIMAL(4,1), --PASI score range 0-72
  day30_pasi_score DECIMAL(4,1),
  day100_pasi_score DECIMAL(4,1),
  day7_tewl DECIMAL(5,2), --in g/m^2/h
  day30_tewl DECIMAL(5,2),
  day100_tewl DECIMAL(5,2),
  day7_itch_vas INT, --visual analog scale 0-100
  day30_itch_vas INT,
  day100_itch_vas INT,
  day7_hfg DECIMAL(4,1), --hair growth factor range 0-5
  day30_hfg DECIMAL(4,1),
  day100_hfg DECIMAL(4,1)
);
CREATE TABLE adverse_events (
  id SERIAL, --1 row per adverse event per treatment_id
  treatment_id INT,
  reported_dt DATE,
  description TEXT
);
CREATE TABLE concomitant_meds (
  id SERIAL, --1 row per med per treatment_id
  treatment_id INT,
  med_name VARCHAR(100),
  start_dt TEXT, --YYYY-MM-DD
  end_dt TEXT, --YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, --possible values: mg, ml, g
  freq_hrs INT
);


Generate a valid postgres query that best answers the question `show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.`."
How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?,SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE d.diag_name ILIKE '%psoriasis%' AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= CURRENT_DATE - INTERVAL '6 months';,derm_treatment,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,"Generate a postgres query to answer this question: `How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?`

DDL statements:
CREATE TABLE doctors (
  doc_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, --possible values: dermatology, immunology, general
  year_reg INT, --year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) --board certification number
);
CREATE TABLE patients (
  patient_id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), --Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2),
  addr_zip VARCHAR(10),
  ins_type TEXT, --Insurance type. Possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20), --Insurance policy number
  height_cm FLOAT,
  weight_kg FLOAT
);
CREATE TABLE drugs (
  drug_id SERIAL,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, --possible values: biologic, small molecule, topical
  moa TEXT, --mechanism of action
  fda_appr_dt DATE, --FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, --possible values: oral, injection, topical
  dos_amt DECIMAL(10,2), --recommended dosage amount
  dos_unit VARCHAR(20), --recommended dosage unit
  dos_freq_hrs INT, --recommended number of hours between dosages
  ndc VARCHAR(20) --National Drug Code
);
CREATE TABLE diagnoses (
  diag_id SERIAL,
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);
CREATE TABLE treatments (
  treatment_id SERIAL,
  patient_id INT,
  doc_id INT,
  drug_id INT,
  diag_id INT,
  start_dt DATE,
  end_dt DATE, --NULL if treatment is ongoing
  is_placebo BOOLEAN,
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT --possible values: mg, ml, g
);
CREATE TABLE outcomes (
  outcome_id SERIAL,
  treatment_id INT,
  assess_dt DATE,
  day7_lesion_cnt INT, --lesion counts on day 7.
  day30_lesion_cnt INT,
  day100_lesion_cnt INT,
  day7_pasi_score DECIMAL(4,1), --PASI score range 0-72
  day30_pasi_score DECIMAL(4,1),
  day100_pasi_score DECIMAL(4,1),
  day7_tewl DECIMAL(5,2), --in g/m^2/h
  day30_tewl DECIMAL(5,2),
  day100_tewl DECIMAL(5,2),
  day7_itch_vas INT, --visual analog scale 0-100
  day30_itch_vas INT,
  day100_itch_vas INT,
  day7_hfg DECIMAL(4,1), --hair growth factor range 0-5
  day30_hfg DECIMAL(4,1),
  day100_hfg DECIMAL(4,1)
);
CREATE TABLE adverse_events (
  id SERIAL, --1 row per adverse event per treatment_id
  treatment_id INT,
  reported_dt DATE,
  description TEXT
);
CREATE TABLE concomitant_meds (
  id SERIAL, --1 row per med per treatment_id
  treatment_id INT,
  med_name VARCHAR(100),
  start_dt TEXT, --YYYY-MM-DD
  end_dt TEXT, --YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, --possible values: mg, ml, g
  freq_hrs INT
);


Generate a valid postgres query that best answers the question `How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?`."
What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?,"SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM consumer_div.user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM consumer_div.user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01' );",ewallet,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,"Generate a postgres query to answer this question: `What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?`

DDL statements:
CREATE SCHEMA IF NOT EXISTS consumer_div;
CREATE TABLE consumer_div.users (
  uid BIGINT,
  username VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  created_at TIMESTAMP,
  last_login_at TIMESTAMP,
  user_type VARCHAR(20), --possible values: individual, business, admin
  status VARCHAR(20), --possible values: active, inactive, suspended, deleted
  country VARCHAR(2), --2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), --possible values: pending, approved, rejected
  kyc_verified_at TIMESTAMP
);
CREATE TABLE consumer_div.merchants (
  mid BIGINT,
  name VARCHAR(100),
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at TIMESTAMP,
  country VARCHAR(2), --2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20), --possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, --Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);
CREATE TABLE consumer_div.coupons (
  cid BIGINT, --Unique identifier for the coupon
  merchant_id BIGINT, --ID of merchant that issued the coupon
  code VARCHAR(20),
  description TEXT,
  start_date DATE,
  end_date DATE,
  discount_type VARCHAR(20), --possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2),
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20), --possible values: active, inactive, expired
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_transactions_daily (
  txid SERIAL,
  sender_id BIGINT,
  sender_type INT, --0 for user, 1 for merchant
  receiver_id BIGINT,
  receiver_type INT, --0 for user, 1 for merchant
  amount DECIMAL(10,2),
  status VARCHAR(20), --possible values: pending, success, failed, refunded
  type VARCHAR(20), --possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, --NULL if transaction doesn't involve a coupon
  created_at TIMESTAMP,
  completed_at TIMESTAMP, --NULL if failed
  transaction_ref VARCHAR(36), --randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);
CREATE TABLE consumer_div.wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.notifications (
  id SERIAL,
  user_id BIGINT,
  message TEXT,
  type VARCHAR(50), --possible values: transaction, promotion, security, general
  status VARCHAR(20), --possible values: unread, read, archived
  created_at TIMESTAMP,
  read_at TIMESTAMP, --NULL if not read
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT --can be external https or deeplink url within the app
);
CREATE TABLE consumer_div.user_sessions (
  user_id BIGINT,
  session_start_ts TIMESTAMP,
  session_end_ts TIMESTAMP,
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);
CREATE TABLE consumer_div.user_setting_snapshot (
  user_id BIGINT,
  snapshot_date DATE,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INTEGER, --0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, --comma separated list of device ids
  verified_ips TEXT, --comma separated list of IP addresses
  mfa_enabled BOOLEAN,
  marketing_opt_in BOOLEAN,
  created_at TIMESTAMP
);


Generate a valid postgres query that best answers the question `What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?`."
"Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.","SELECT u.username, u.email, u.created_at FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND u.created_at + INTERVAL '1 year' WHERE n.user_id IS NULL;",ewallet,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,"Generate a postgres query to answer this question: `Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.`

DDL statements:
CREATE SCHEMA IF NOT EXISTS consumer_div;
CREATE TABLE consumer_div.users (
  uid BIGINT,
  username VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  created_at TIMESTAMP,
  last_login_at TIMESTAMP,
  user_type VARCHAR(20), --possible values: individual, business, admin
  status VARCHAR(20), --possible values: active, inactive, suspended, deleted
  country VARCHAR(2), --2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), --possible values: pending, approved, rejected
  kyc_verified_at TIMESTAMP
);
CREATE TABLE consumer_div.merchants (
  mid BIGINT,
  name VARCHAR(100),
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at TIMESTAMP,
  country VARCHAR(2), --2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20), --possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, --Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);
CREATE TABLE consumer_div.coupons (
  cid BIGINT, --Unique identifier for the coupon
  merchant_id BIGINT, --ID of merchant that issued the coupon
  code VARCHAR(20),
  description TEXT,
  start_date DATE,
  end_date DATE,
  discount_type VARCHAR(20), --possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2),
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20), --possible values: active, inactive, expired
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_transactions_daily (
  txid SERIAL,
  sender_id BIGINT,
  sender_type INT, --0 for user, 1 for merchant
  receiver_id BIGINT,
  receiver_type INT, --0 for user, 1 for merchant
  amount DECIMAL(10,2),
  status VARCHAR(20), --possible values: pending, success, failed, refunded
  type VARCHAR(20), --possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, --NULL if transaction doesn't involve a coupon
  created_at TIMESTAMP,
  completed_at TIMESTAMP, --NULL if failed
  transaction_ref VARCHAR(36), --randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);
CREATE TABLE consumer_div.wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.notifications (
  id SERIAL,
  user_id BIGINT,
  message TEXT,
  type VARCHAR(50), --possible values: transaction, promotion, security, general
  status VARCHAR(20), --possible values: unread, read, archived
  created_at TIMESTAMP,
  read_at TIMESTAMP, --NULL if not read
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT --can be external https or deeplink url within the app
);
CREATE TABLE consumer_div.user_sessions (
  user_id BIGINT,
  session_start_ts TIMESTAMP,
  session_end_ts TIMESTAMP,
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);
CREATE TABLE consumer_div.user_setting_snapshot (
  user_id BIGINT,
  snapshot_date DATE,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INTEGER, --0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, --comma separated list of device ids
  verified_ips TEXT, --comma separated list of IP addresses
  mfa_enabled BOOLEAN,
  marketing_opt_in BOOLEAN,
  created_at TIMESTAMP
);


Generate a valid postgres query that best answers the question `Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.`."
what was the average user session duration in seconds split by device_type?,"SELECT device_type, AVG(EXTRACT(EPOCH FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM consumer_div.user_sessions WHERE session_end_ts IS NOT NULL GROUP BY device_type;",ewallet,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,"Generate a postgres query to answer this question: `what was the average user session duration in seconds split by device_type?`

DDL statements:
CREATE SCHEMA IF NOT EXISTS consumer_div;
CREATE TABLE consumer_div.users (
  uid BIGINT,
  username VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  created_at TIMESTAMP,
  last_login_at TIMESTAMP,
  user_type VARCHAR(20), --possible values: individual, business, admin
  status VARCHAR(20), --possible values: active, inactive, suspended, deleted
  country VARCHAR(2), --2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), --possible values: pending, approved, rejected
  kyc_verified_at TIMESTAMP
);
CREATE TABLE consumer_div.merchants (
  mid BIGINT,
  name VARCHAR(100),
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at TIMESTAMP,
  country VARCHAR(2), --2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20), --possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, --Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);
CREATE TABLE consumer_div.coupons (
  cid BIGINT, --Unique identifier for the coupon
  merchant_id BIGINT, --ID of merchant that issued the coupon
  code VARCHAR(20),
  description TEXT,
  start_date DATE,
  end_date DATE,
  discount_type VARCHAR(20), --possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2),
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20), --possible values: active, inactive, expired
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_transactions_daily (
  txid SERIAL,
  sender_id BIGINT,
  sender_type INT, --0 for user, 1 for merchant
  receiver_id BIGINT,
  receiver_type INT, --0 for user, 1 for merchant
  amount DECIMAL(10,2),
  status VARCHAR(20), --possible values: pending, success, failed, refunded
  type VARCHAR(20), --possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, --NULL if transaction doesn't involve a coupon
  created_at TIMESTAMP,
  completed_at TIMESTAMP, --NULL if failed
  transaction_ref VARCHAR(36), --randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);
CREATE TABLE consumer_div.wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.notifications (
  id SERIAL,
  user_id BIGINT,
  message TEXT,
  type VARCHAR(50), --possible values: transaction, promotion, security, general
  status VARCHAR(20), --possible values: unread, read, archived
  created_at TIMESTAMP,
  read_at TIMESTAMP, --NULL if not read
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT --can be external https or deeplink url within the app
);
CREATE TABLE consumer_div.user_sessions (
  user_id BIGINT,
  session_start_ts TIMESTAMP,
  session_end_ts TIMESTAMP,
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);
CREATE TABLE consumer_div.user_setting_snapshot (
  user_id BIGINT,
  snapshot_date DATE,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INTEGER, --0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, --comma separated list of device ids
  verified_ips TEXT, --comma separated list of IP addresses
  mfa_enabled BOOLEAN,
  marketing_opt_in BOOLEAN,
  created_at TIMESTAMP
);


Generate a valid postgres query that best answers the question `what was the average user session duration in seconds split by device_type?`."
Give me today's median merchant wallet balance for all active merchants whose category contains 'retail',"WITH retail_merchants AS (SELECT mid FROM consumer_div.merchants WHERE category ILIKE '%retail%' AND status = 'active' ), merchant_balances AS (SELECT balance FROM consumer_div.wallet_merchant_balance_daily wmbd JOIN retail_merchants rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE ) SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY balance) AS median_balance FROM merchant_balances;",ewallet,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,"Generate a postgres query to answer this question: `Give me today's median merchant wallet balance for all active merchants whose category contains 'retail'`

DDL statements:
CREATE SCHEMA IF NOT EXISTS consumer_div;
CREATE TABLE consumer_div.users (
  uid BIGINT,
  username VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  created_at TIMESTAMP,
  last_login_at TIMESTAMP,
  user_type VARCHAR(20), --possible values: individual, business, admin
  status VARCHAR(20), --possible values: active, inactive, suspended, deleted
  country VARCHAR(2), --2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), --possible values: pending, approved, rejected
  kyc_verified_at TIMESTAMP
);
CREATE TABLE consumer_div.merchants (
  mid BIGINT,
  name VARCHAR(100),
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at TIMESTAMP,
  country VARCHAR(2), --2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20), --possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, --Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);
CREATE TABLE consumer_div.coupons (
  cid BIGINT, --Unique identifier for the coupon
  merchant_id BIGINT, --ID of merchant that issued the coupon
  code VARCHAR(20),
  description TEXT,
  start_date DATE,
  end_date DATE,
  discount_type VARCHAR(20), --possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2),
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20), --possible values: active, inactive, expired
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_transactions_daily (
  txid SERIAL,
  sender_id BIGINT,
  sender_type INT, --0 for user, 1 for merchant
  receiver_id BIGINT,
  receiver_type INT, --0 for user, 1 for merchant
  amount DECIMAL(10,2),
  status VARCHAR(20), --possible values: pending, success, failed, refunded
  type VARCHAR(20), --possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, --NULL if transaction doesn't involve a coupon
  created_at TIMESTAMP,
  completed_at TIMESTAMP, --NULL if failed
  transaction_ref VARCHAR(36), --randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);
CREATE TABLE consumer_div.wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.notifications (
  id SERIAL,
  user_id BIGINT,
  message TEXT,
  type VARCHAR(50), --possible values: transaction, promotion, security, general
  status VARCHAR(20), --possible values: unread, read, archived
  created_at TIMESTAMP,
  read_at TIMESTAMP, --NULL if not read
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT --can be external https or deeplink url within the app
);
CREATE TABLE consumer_div.user_sessions (
  user_id BIGINT,
  session_start_ts TIMESTAMP,
  session_end_ts TIMESTAMP,
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);
CREATE TABLE consumer_div.user_setting_snapshot (
  user_id BIGINT,
  snapshot_date DATE,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INTEGER, --0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, --comma separated list of device ids
  verified_ips TEXT, --comma separated list of IP addresses
  mfa_enabled BOOLEAN,
  marketing_opt_in BOOLEAN,
  created_at TIMESTAMP
);


Generate a valid postgres query that best answers the question `Give me today's median merchant wallet balance for all active merchants whose category contains 'retail'`."
"Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date","WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM consumer_div.coupons c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM consumer_div.merchants m JOIN earliest_coupons ec ON m.mid = ec.merchant_id JOIN consumer_div.coupons c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= m.created_at + INTERVAL '1 year';",ewallet,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,"Generate a postgres query to answer this question: `Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date`

DDL statements:
CREATE SCHEMA IF NOT EXISTS consumer_div;
CREATE TABLE consumer_div.users (
  uid BIGINT,
  username VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  created_at TIMESTAMP,
  last_login_at TIMESTAMP,
  user_type VARCHAR(20), --possible values: individual, business, admin
  status VARCHAR(20), --possible values: active, inactive, suspended, deleted
  country VARCHAR(2), --2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), --possible values: pending, approved, rejected
  kyc_verified_at TIMESTAMP
);
CREATE TABLE consumer_div.merchants (
  mid BIGINT,
  name VARCHAR(100),
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at TIMESTAMP,
  country VARCHAR(2), --2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20), --possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, --Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);
CREATE TABLE consumer_div.coupons (
  cid BIGINT, --Unique identifier for the coupon
  merchant_id BIGINT, --ID of merchant that issued the coupon
  code VARCHAR(20),
  description TEXT,
  start_date DATE,
  end_date DATE,
  discount_type VARCHAR(20), --possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2),
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20), --possible values: active, inactive, expired
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_transactions_daily (
  txid SERIAL,
  sender_id BIGINT,
  sender_type INT, --0 for user, 1 for merchant
  receiver_id BIGINT,
  receiver_type INT, --0 for user, 1 for merchant
  amount DECIMAL(10,2),
  status VARCHAR(20), --possible values: pending, success, failed, refunded
  type VARCHAR(20), --possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, --NULL if transaction doesn't involve a coupon
  created_at TIMESTAMP,
  completed_at TIMESTAMP, --NULL if failed
  transaction_ref VARCHAR(36), --randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);
CREATE TABLE consumer_div.wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2),
  updated_at TIMESTAMP
);
CREATE TABLE consumer_div.notifications (
  id SERIAL,
  user_id BIGINT,
  message TEXT,
  type VARCHAR(50), --possible values: transaction, promotion, security, general
  status VARCHAR(20), --possible values: unread, read, archived
  created_at TIMESTAMP,
  read_at TIMESTAMP, --NULL if not read
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT --can be external https or deeplink url within the app
);
CREATE TABLE consumer_div.user_sessions (
  user_id BIGINT,
  session_start_ts TIMESTAMP,
  session_end_ts TIMESTAMP,
  device_type VARCHAR(10), --possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);
CREATE TABLE consumer_div.user_setting_snapshot (
  user_id BIGINT,
  snapshot_date DATE,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INTEGER, --0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, --comma separated list of device ids
  verified_ips TEXT, --comma separated list of IP addresses
  mfa_enabled BOOLEAN,
  marketing_opt_in BOOLEAN,
  created_at TIMESTAMP
);


Generate a valid postgres query that best answers the question `Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date`."
Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.,"SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons s ORDER BY days_employed ASC LIMIT 1;",car_dealership,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.`

DDL statements:
CREATE TABLE cars (
  id SERIAL, --Primary key for the cars table
  make TEXT, --Manufacturer of the car
  model TEXT, --Model name of the car
  year INTEGER, --Year of manufacture
  color TEXT, --Color of the car
  vin_number VARCHAR(17), --Vehicle Identification Number
  engine_type TEXT, --Type of engine (e.g., V6, V8, Electric)
  transmission TEXT, --Type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2), --Cost of the car
  crtd_ts TIMESTAMP --Timestamp when the car was added to the system
);
CREATE TABLE salespersons (
  id SERIAL, --Unique identifier for each salesperson
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20), --First 3 digits in brackets is the area code. Format: (123)-456-7890
  hire_date DATE,
  termination_date DATE,
  crtd_ts TIMESTAMP --Timestamp when the salesperson record was created
);
CREATE TABLE customers (
  id SERIAL, --Primary key for the customers table
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code VARCHAR(10),
  crtd_ts TIMESTAMP --Timestamp when the customer record was created
);
CREATE TABLE sales (
  id SERIAL, --Primary key that uniquely identifies each sale
  car_id INTEGER, --Foreign key referencing the cars table
  salesperson_id INTEGER, --Foreign key referencing the salespersons table
  customer_id INTEGER, --Foreign key referencing the customers table
  sale_price NUMERIC(10, 2), --Price at which the car was sold
  sale_date DATE, --Date when the car was sold
  crtd_ts TIMESTAMP --Timestamp when the sale record was created
);
CREATE TABLE inventory_snapshots (
  id SERIAL, --Primary key for the inventory_snapshots table
  snapshot_date DATE, --Date of the inventory snapshot
  car_id INTEGER, --Foreign key referencing the cars table
  is_in_inventory BOOLEAN, --Indicates if the car was in inventory on the snapshot date
  crtd_ts TIMESTAMP --Timestamp when the inventory snapshot record was created
);
CREATE TABLE payments_received (
  id SERIAL, --Uniquely identifies each payment received record
  sale_id INTEGER, --Foreign key referencing the sales table
  payment_date DATE, --Date when the payment was received. Can take place after the sale date, or in installments.
  payment_amount NUMERIC(10, 2), --Amount of the payment received. Can be less than the sale price if the payment is made in installments.
  payment_method TEXT, --Method of payment (e.g., cash, check, card, banktrf, trp01)
  crtd_ts TIMESTAMP --Timestamp when the payment received record was created
);
CREATE TABLE payments_made (
  id SERIAL, --Primary key for the payments_made table
  vendor_name TEXT, --Name of the vendor to whom the payment was made
  payment_date DATE, --Date when the payment was made
  payment_amount NUMERIC(10, 2), --Amount of the payment made
  payment_method TEXT, --Method of payment (e.g., check, bank_transfer, credit_card)
  invoice_number VARCHAR(50), --Invoice number associated with the payment
  invoice_date DATE, --Date of the invoice
  due_date DATE, --Due date of the invoice
  crtd_ts TIMESTAMP --Timestamp when the payment made record was created
);


Generate a valid postgres query that best answers the question `Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.`."
Return the number of payments made on weekends to the vendor named 'Utility Company',"SELECT COUNT(*) AS weekend_payments FROM payments_made WHERE vendor_name = 'Utility Company' AND EXTRACT(DOW FROM payment_date) IN (0, 6);",car_dealership,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,"Generate a postgres query to answer this question: `Return the number of payments made on weekends to the vendor named 'Utility Company'`

DDL statements:
CREATE TABLE cars (
  id SERIAL, --Primary key for the cars table
  make TEXT, --Manufacturer of the car
  model TEXT, --Model name of the car
  year INTEGER, --Year of manufacture
  color TEXT, --Color of the car
  vin_number VARCHAR(17), --Vehicle Identification Number
  engine_type TEXT, --Type of engine (e.g., V6, V8, Electric)
  transmission TEXT, --Type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2), --Cost of the car
  crtd_ts TIMESTAMP --Timestamp when the car was added to the system
);
CREATE TABLE salespersons (
  id SERIAL, --Unique identifier for each salesperson
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20), --First 3 digits in brackets is the area code. Format: (123)-456-7890
  hire_date DATE,
  termination_date DATE,
  crtd_ts TIMESTAMP --Timestamp when the salesperson record was created
);
CREATE TABLE customers (
  id SERIAL, --Primary key for the customers table
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code VARCHAR(10),
  crtd_ts TIMESTAMP --Timestamp when the customer record was created
);
CREATE TABLE sales (
  id SERIAL, --Primary key that uniquely identifies each sale
  car_id INTEGER, --Foreign key referencing the cars table
  salesperson_id INTEGER, --Foreign key referencing the salespersons table
  customer_id INTEGER, --Foreign key referencing the customers table
  sale_price NUMERIC(10, 2), --Price at which the car was sold
  sale_date DATE, --Date when the car was sold
  crtd_ts TIMESTAMP --Timestamp when the sale record was created
);
CREATE TABLE inventory_snapshots (
  id SERIAL, --Primary key for the inventory_snapshots table
  snapshot_date DATE, --Date of the inventory snapshot
  car_id INTEGER, --Foreign key referencing the cars table
  is_in_inventory BOOLEAN, --Indicates if the car was in inventory on the snapshot date
  crtd_ts TIMESTAMP --Timestamp when the inventory snapshot record was created
);
CREATE TABLE payments_received (
  id SERIAL, --Uniquely identifies each payment received record
  sale_id INTEGER, --Foreign key referencing the sales table
  payment_date DATE, --Date when the payment was received. Can take place after the sale date, or in installments.
  payment_amount NUMERIC(10, 2), --Amount of the payment received. Can be less than the sale price if the payment is made in installments.
  payment_method TEXT, --Method of payment (e.g., cash, check, card, banktrf, trp01)
  crtd_ts TIMESTAMP --Timestamp when the payment received record was created
);
CREATE TABLE payments_made (
  id SERIAL, --Primary key for the payments_made table
  vendor_name TEXT, --Name of the vendor to whom the payment was made
  payment_date DATE, --Date when the payment was made
  payment_amount NUMERIC(10, 2), --Amount of the payment made
  payment_method TEXT, --Method of payment (e.g., check, bank_transfer, credit_card)
  invoice_number VARCHAR(50), --Invoice number associated with the payment
  invoice_date DATE, --Date of the invoice
  due_date DATE, --Due date of the invoice
  crtd_ts TIMESTAMP --Timestamp when the payment made record was created
);


Generate a valid postgres query that best answers the question `Return the number of payments made on weekends to the vendor named 'Utility Company'`."
"show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method","SELECT payment_date, payment_method, SUM(payment_amount) AS total_amount FROM payments_received WHERE payment_date >= DATE_TRUNC('WEEK', CURRENT_DATE) - INTERVAL '1 week' AND payment_date < DATE_TRUNC('WEEK', CURRENT_DATE) GROUP BY payment_date, payment_method ORDER BY payment_date DESC, payment_method ASC;",car_dealership,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,"Generate a postgres query to answer this question: `show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method`

DDL statements:
CREATE TABLE cars (
  id SERIAL, --Primary key for the cars table
  make TEXT, --Manufacturer of the car
  model TEXT, --Model name of the car
  year INTEGER, --Year of manufacture
  color TEXT, --Color of the car
  vin_number VARCHAR(17), --Vehicle Identification Number
  engine_type TEXT, --Type of engine (e.g., V6, V8, Electric)
  transmission TEXT, --Type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2), --Cost of the car
  crtd_ts TIMESTAMP --Timestamp when the car was added to the system
);
CREATE TABLE salespersons (
  id SERIAL, --Unique identifier for each salesperson
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20), --First 3 digits in brackets is the area code. Format: (123)-456-7890
  hire_date DATE,
  termination_date DATE,
  crtd_ts TIMESTAMP --Timestamp when the salesperson record was created
);
CREATE TABLE customers (
  id SERIAL, --Primary key for the customers table
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code VARCHAR(10),
  crtd_ts TIMESTAMP --Timestamp when the customer record was created
);
CREATE TABLE sales (
  id SERIAL, --Primary key that uniquely identifies each sale
  car_id INTEGER, --Foreign key referencing the cars table
  salesperson_id INTEGER, --Foreign key referencing the salespersons table
  customer_id INTEGER, --Foreign key referencing the customers table
  sale_price NUMERIC(10, 2), --Price at which the car was sold
  sale_date DATE, --Date when the car was sold
  crtd_ts TIMESTAMP --Timestamp when the sale record was created
);
CREATE TABLE inventory_snapshots (
  id SERIAL, --Primary key for the inventory_snapshots table
  snapshot_date DATE, --Date of the inventory snapshot
  car_id INTEGER, --Foreign key referencing the cars table
  is_in_inventory BOOLEAN, --Indicates if the car was in inventory on the snapshot date
  crtd_ts TIMESTAMP --Timestamp when the inventory snapshot record was created
);
CREATE TABLE payments_received (
  id SERIAL, --Uniquely identifies each payment received record
  sale_id INTEGER, --Foreign key referencing the sales table
  payment_date DATE, --Date when the payment was received. Can take place after the sale date, or in installments.
  payment_amount NUMERIC(10, 2), --Amount of the payment received. Can be less than the sale price if the payment is made in installments.
  payment_method TEXT, --Method of payment (e.g., cash, check, card, banktrf, trp01)
  crtd_ts TIMESTAMP --Timestamp when the payment received record was created
);
CREATE TABLE payments_made (
  id SERIAL, --Primary key for the payments_made table
  vendor_name TEXT, --Name of the vendor to whom the payment was made
  payment_date DATE, --Date when the payment was made
  payment_amount NUMERIC(10, 2), --Amount of the payment made
  payment_method TEXT, --Method of payment (e.g., check, bank_transfer, credit_card)
  invoice_number VARCHAR(50), --Invoice number associated with the payment
  invoice_date DATE, --Date of the invoice
  due_date DATE, --Due date of the invoice
  crtd_ts TIMESTAMP --Timestamp when the payment made record was created
);


Generate a valid postgres query that best answers the question `show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method`."
"Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory"" if is_in_inventory is True.""","WITH latest_snapshot AS (SELECT MAX(snapshot_date) AS snapshot_date FROM inventory_snapshots WHERE snapshot_date BETWEEN '2023-03-01' AND '2023-03-31' ), latest_snapshot_data AS (SELECT inv.car_id FROM inventory_snapshots inv JOIN latest_snapshot ls ON inv.snapshot_date = ls.snapshot_date WHERE inv.is_in_inventory = TRUE ) SELECT c.id, c.make, c.model, c.year FROM cars c JOIN latest_snapshot_data lsd ON c.id = lsd.car_id;",car_dealership,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,"Generate a postgres query to answer this question: `Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory"" if is_in_inventory is True.""`

DDL statements:
CREATE TABLE cars (
  id SERIAL, --Primary key for the cars table
  make TEXT, --Manufacturer of the car
  model TEXT, --Model name of the car
  year INTEGER, --Year of manufacture
  color TEXT, --Color of the car
  vin_number VARCHAR(17), --Vehicle Identification Number
  engine_type TEXT, --Type of engine (e.g., V6, V8, Electric)
  transmission TEXT, --Type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2), --Cost of the car
  crtd_ts TIMESTAMP --Timestamp when the car was added to the system
);
CREATE TABLE salespersons (
  id SERIAL, --Unique identifier for each salesperson
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20), --First 3 digits in brackets is the area code. Format: (123)-456-7890
  hire_date DATE,
  termination_date DATE,
  crtd_ts TIMESTAMP --Timestamp when the salesperson record was created
);
CREATE TABLE customers (
  id SERIAL, --Primary key for the customers table
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code VARCHAR(10),
  crtd_ts TIMESTAMP --Timestamp when the customer record was created
);
CREATE TABLE sales (
  id SERIAL, --Primary key that uniquely identifies each sale
  car_id INTEGER, --Foreign key referencing the cars table
  salesperson_id INTEGER, --Foreign key referencing the salespersons table
  customer_id INTEGER, --Foreign key referencing the customers table
  sale_price NUMERIC(10, 2), --Price at which the car was sold
  sale_date DATE, --Date when the car was sold
  crtd_ts TIMESTAMP --Timestamp when the sale record was created
);
CREATE TABLE inventory_snapshots (
  id SERIAL, --Primary key for the inventory_snapshots table
  snapshot_date DATE, --Date of the inventory snapshot
  car_id INTEGER, --Foreign key referencing the cars table
  is_in_inventory BOOLEAN, --Indicates if the car was in inventory on the snapshot date
  crtd_ts TIMESTAMP --Timestamp when the inventory snapshot record was created
);
CREATE TABLE payments_received (
  id SERIAL, --Uniquely identifies each payment received record
  sale_id INTEGER, --Foreign key referencing the sales table
  payment_date DATE, --Date when the payment was received. Can take place after the sale date, or in installments.
  payment_amount NUMERIC(10, 2), --Amount of the payment received. Can be less than the sale price if the payment is made in installments.
  payment_method TEXT, --Method of payment (e.g., cash, check, card, banktrf, trp01)
  crtd_ts TIMESTAMP --Timestamp when the payment received record was created
);
CREATE TABLE payments_made (
  id SERIAL, --Primary key for the payments_made table
  vendor_name TEXT, --Name of the vendor to whom the payment was made
  payment_date DATE, --Date when the payment was made
  payment_amount NUMERIC(10, 2), --Amount of the payment made
  payment_method TEXT, --Method of payment (e.g., check, bank_transfer, credit_card)
  invoice_number VARCHAR(50), --Invoice number associated with the payment
  invoice_date DATE, --Date of the invoice
  due_date DATE, --Due date of the invoice
  crtd_ts TIMESTAMP --Timestamp when the payment made record was created
);


Generate a valid postgres query that best answers the question `Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory"" if is_in_inventory is True.""`."
What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.,"SELECT DATE_TRUNC('QUARTER', s.sale_date) AS QUARTER, c.state, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.state, QUARTER HAVING SUM(s.sale_price) > 0 ORDER BY QUARTER, c.state ;",car_dealership,date_functions,,postgres,,,,0,0,0,0,0,0.0,0,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,"Generate a postgres query to answer this question: `What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.`

DDL statements:
CREATE TABLE cars (
  id SERIAL, --Primary key for the cars table
  make TEXT, --Manufacturer of the car
  model TEXT, --Model name of the car
  year INTEGER, --Year of manufacture
  color TEXT, --Color of the car
  vin_number VARCHAR(17), --Vehicle Identification Number
  engine_type TEXT, --Type of engine (e.g., V6, V8, Electric)
  transmission TEXT, --Type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2), --Cost of the car
  crtd_ts TIMESTAMP --Timestamp when the car was added to the system
);
CREATE TABLE salespersons (
  id SERIAL, --Unique identifier for each salesperson
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20), --First 3 digits in brackets is the area code. Format: (123)-456-7890
  hire_date DATE,
  termination_date DATE,
  crtd_ts TIMESTAMP --Timestamp when the salesperson record was created
);
CREATE TABLE customers (
  id SERIAL, --Primary key for the customers table
  first_name TEXT,
  last_name TEXT,
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code VARCHAR(10),
  crtd_ts TIMESTAMP --Timestamp when the customer record was created
);
CREATE TABLE sales (
  id SERIAL, --Primary key that uniquely identifies each sale
  car_id INTEGER, --Foreign key referencing the cars table
  salesperson_id INTEGER, --Foreign key referencing the salespersons table
  customer_id INTEGER, --Foreign key referencing the customers table
  sale_price NUMERIC(10, 2), --Price at which the car was sold
  sale_date DATE, --Date when the car was sold
  crtd_ts TIMESTAMP --Timestamp when the sale record was created
);
CREATE TABLE inventory_snapshots (
  id SERIAL, --Primary key for the inventory_snapshots table
  snapshot_date DATE, --Date of the inventory snapshot
  car_id INTEGER, --Foreign key referencing the cars table
  is_in_inventory BOOLEAN, --Indicates if the car was in inventory on the snapshot date
  crtd_ts TIMESTAMP --Timestamp when the inventory snapshot record was created
);
CREATE TABLE payments_received (
  id SERIAL, --Uniquely identifies each payment received record
  sale_id INTEGER, --Foreign key referencing the sales table
  payment_date DATE, --Date when the payment was received. Can take place after the sale date, or in installments.
  payment_amount NUMERIC(10, 2), --Amount of the payment received. Can be less than the sale price if the payment is made in installments.
  payment_method TEXT, --Method of payment (e.g., cash, check, card, banktrf, trp01)
  crtd_ts TIMESTAMP --Timestamp when the payment received record was created
);
CREATE TABLE payments_made (
  id SERIAL, --Primary key for the payments_made table
  vendor_name TEXT, --Name of the vendor to whom the payment was made
  payment_date DATE, --Date when the payment was made
  payment_amount NUMERIC(10, 2), --Amount of the payment made
  payment_method TEXT, --Method of payment (e.g., check, bank_transfer, credit_card)
  invoice_number VARCHAR(50), --Invoice number associated with the payment
  invoice_date DATE, --Date of the invoice
  due_date DATE, --Due date of the invoice
  crtd_ts TIMESTAMP --Timestamp when the payment made record was created
);


Generate a valid postgres query that best answers the question `What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.`."
